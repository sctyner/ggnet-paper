% !TeX root = RJwrapper.tex
\title{Network Visualizations in \CRANpkg{ggplot2}}
\author{by Sam Tyner, Fran\c{c}ois Briatte and  Heike Hofmann}

\maketitle

\abstract{
An abstract of less than 150 words.
}

<<setup_knitr, echo=FALSE>>=
library(knitr)
opts_chunk$set(
  tidy = FALSE, echo=FALSE, cache=FALSE, eval = TRUE,
  message = FALSE, warning = FALSE, highlight = FALSE, background = '#FFFFFF',
  fig.height = 8, fig.width = 8, fig.align = 'center', fig.show='hide'
)


## From Josh O'Brien's stackoverflow answer:
## http://stackoverflow.com/questions/11030898/knitr-how-to-align-code-and-plot-side-by-side
## These two settings control text width in codefig vs. usual code blocks
partWidth <- 35
fullWidth <- 80
options(width = fullWidth)

##  (1) CHUNK HOOK FUNCTION
##   First, to set R's textual output width on a per-chunk basis, we
## need to define a hook function which temporarily resets global R's
## option() settings, just for the current chunk
knit_hooks$set(r.opts=local({
    ropts <- NA
    function(before, options, envir) {
        if (before) {
            ropts <<- options(options$r.opts)
        } else {
            options(ropts)
        }
    }
}))

## (2) OUTPUT HOOK FUNCTION

##   Define a custom output hook function. This function processes _all_
## evaluated chunks, but will return the same output as the usual one,
## UNLESS a 'codefig' argument appeared in the chunk's header.  In that
## case, wrap the usual textual output in LaTeX code placing it in a
## narrower adjustbox environment and setting the graphics that it
## produced in another box beside it.

defaultChunkHook <- environment(knit_hooks[["get"]])$defaults$chunk

codefigChunkHook <- function (x, options) {
        main <-  defaultChunkHook(x, options)
        before <-
            "\\vspace{1em}\n
             \\begin{adjustbox}{valign=t}\n
             \\begin{minipage}{.49\\textwidth}\n"
        after <-
            paste("\\vspace{1em}\n
                   \\end{minipage}\n
                  \\begin{minipage}{.49\\textwidth}\n",
                   paste0("\\includegraphics[width=\\textwidth]{figure/",
                          options[["label"]], "-1.pdf}\n
                          \\end{minipage}\n
                          \\end{adjustbox}"),
                          sep="\n")
    ## Was a codefig option supplied in chunk header?
    ## If so, wrap code block and graphical output with needed LaTeX code.
    if (!is.null(options$codefig)) {
      return(sprintf("%s %s %s", before, main, after))
    } else {
      return(main)
    }
}

knit_hooks[["set"]](chunk = codefigChunkHook)


## (3) TEMPLATE
##   codefig=TRUE is just one of several options needed for the
## side-by-side code block and a figure to come out right. Rather
## than typing out each of them in every single chunk header, we
## define a _template_ which bundles them all together. Then we can
## set all of those options simply by typing opts.label="codefig".

opts_template[["set"]](
codefig = list(codefig=TRUE, fig.show = "hide",
               r.opts = list(width=partWidth),
               tidy.opts = list(width.cutoff = partWidth)))

@

<<load_packages, results='hide'>>=
## ggplot2
library(ggplot2) # needs to be version â‰¥ 1.0.1.9003

## ggnet
if (!require(ggnet, quietly = TRUE)) {
  devtools::install_github("sctyner/ggnet")
}
library(ggnet)

## ggnetwork
if (!require(ggnetwork, quietly = TRUE)) {
  devtools::install_github("briatte/ggnetwork")
}
library(ggnetwork)

## ggnet2
source("https://raw.githubusercontent.com/briatte/ggnet/master/ggnet2.R")

library(ggplot2)
@

% introductory section
\hh{We need a slightly more gentle intro to networks. }
At its core, a network is simply a set of points connected in pairs by a set of lines \citep{newman}.  Here, we refer to the lines as edges and the points as vertices, although these are also called nodes.  These two seemingly simple sets of graphical objects, points and segments, are used to encode a huge variety and quantity of information across many fields of study. For instance, networks of scientific collaboration, a food web of marine animals, and American college football games are all covered in a paper on community detection in networks by \citet{football}.  \citet{networkfailures} examine node failure in interdependent networks like power grids.  Social networks, such as links between actors found on \url{www.imdb.com}, and neural networks, like the completely mapped neural network of the \textit{C. elegans} worm are also etensively studied \citep{smallworld}.  Networks vary widely in scope and complexity: the smallest network is simply an edge between two vertices, while one of the most commonly used and most complex networks, the world wide web, has billions of vertices (webpages) and billions of edges (hyperlinks) connecting them.  The edges in a network can  be directed or undirected: directed edges represent information travelling from one vertex to another, and switching the direction would change the structure of the network. The world wide web is an example of a directed network because one webpage may link to another, but not necessarily the other way around. Undirected edges are simply connections between vertices. In co-authorship networks nodes are authors connected by an edge, if they author an academic publication together. Co-authorship networks are examples of undirected networks because if two people author a paper together, it creates a connection between them that is bidirectional.

\par A social network is a network that everyone is a part of in one way or another.  We do not necessarily refer here to social media like Facebook or LinkedIn, but rather to the connections we form with other people. To demonstrate the functionality of our geometry for plotting networks, we have chosen an example of a social network from the popular television show Mad Men.  This network, compiled by \citet{madmen}, is made up of 52 vertices and 87 edges. Each vertex represents a character on the show, and there is an edge between every two characters who have had a romantic relationship.

Figure~\ref{fig.cap:madmen_ex} shows this network.
In the plot, we can see one central character who has many more relationships than any other character. This vertex represents the main character of the show, Don Draper, who is quite the ``ladies' man."  This example shows just how ubiquitous networks are. %% if we have to say that something is fun, it no longer is ...

\begin{figure}[hbtp]
\centering
<<madmen_ex_ggnet, dependson='reading_data', out.width='\\textwidth', fig.width=9, fig.height=9>>=
# source for geom_net - see Fig.1
# data step: merge edges and nodes
MMnet <- merge(madmen$edges, madmen$vertices, by.x = "Name1", by.y = "label", all = TRUE)

# create plot
ggplot(data = MMnet, aes(from_id = Name1, to_id = Name2)) +
  geom_net(aes(colour = Gender), size = 4, label= TRUE, vjust = -0.6, ecolour = "grey50") +
  scale_colour_manual(values = c("#FF69B4", "#0099ff")) +
  xlim(c(-0.05, 1.05)) +
  theme_net() +
  theme(legend.position = "bottom")
@
\includegraphics[width=\textwidth]{figure/madmen_ex_ggnet-1.pdf}
\caption{\label{fig.cap:madmen_ex} \hh{we only need one example here, this is not yet a start into the comparison of the different implementations} Graph of the characters in the show Mad Men who are linked by a romantic relationship.}
\end{figure}
\afterpage{\clearpage}

% Network analysis is important in many fields
\hh{include at least one citation for each one of the examples:}
\par There are many kinds of networks, and networks are extensively studied across many disciplines.  Many sociologists study social networks, and many biologists study protein networks. As different as these and the many other disciplines that study networks are, they all need the ability to quickly and effectively visualize networks.
\hh{quickly and effectively are a bit vague as measures for why we need a geom implementation. We don't want to do any studies measuring time to result or define effectiveness. It might be better to give some concrete examples of packages doing network layouts and discuss the problematic that there is no standard way of bundling up the results, which makes working with them hard, and even harder to modify output to include additional information for visualizations. }

% Visualization of networks helps with analysis
Coloring the vertices or edges in a graph is a quick and easy way to visualize grouping and can help with pattern or cluster detection. The vertices in a network and the edges between them compose the structure of a network, and being able to discover patterns among them visually is a key part of network analysis. Viewing multiple layouts of the same network can also help reveal patterns or clusters that would not be discovered when only viewing one layout or analyzing only an adjacency matrix.

% Many network packages exist, but are not easy to use
Many \texttt{R} packages already exist for network analysis and visualization such as \texttt{igraph} by \citet{igraph}, \texttt{sna} by \citet{sna}, and \texttt{network} by \citet{network.jss, network} but we have found these packages to have unintuitive or burdensome \hh{you're shooting sharp -- it might be better to describe that our approach is more customizable and more intuitive to use} methods for customizing the colors, sizes, etc of the vertices and edges of the network. For instance, the \texttt{igraph} package allows for coloring vertices by groups but the user must assign the colors to each vertex individually as opposed to assigning color by a grouping factor variable.

% ggplot2 as an implementation framework
We found the current tools to be lacking in this ability, so we chose to fill this gap by adding network plotting capabilities to the popular and widely used \texttt{R} package \texttt{ggplot2}. Just to give an idea of the popularity and the wide-spread use of \texttt{ggplot2}, from January 1, 2015 to October 4, 2015, \texttt{ggplot2} was downloaded over 1.2 Million times, or approximately 4,342 downloads per day. It has also been downloaded in 215 countries at least once, and in 61 of those countries, including China, Israel, and Colombia, it has been downloaded over 1,000 times\footnote{\texttt{ggplot2} usage statistics taken from \url{http://cran-logs.rstudio.com/}.}. This is the user base we are aiming at by making network visualizations a part of \texttt{ggplot2}.

\hh{Besides the wide-spread use of ggplot2, its design based on the Grammar of Graphics \citep{wilkinson:1999} makes it relatively easy to extend. Examples include}
\fb{
%Perhaps we could stress that one of the benefits of learning the
%``grammar of graphics" is the opportunity to use that grammar in many
%different situations, e.g. with 
maps (see ggmap by \citet{ggmap}), e.g. with statistical models (see
ggfortify: https://github.com/sinhrks/ggfortify).
What the paper does
is to extend the benefits of learning the "gg" to network
visualization.

A lot of recent changes to ggplot2 are aimed at
facilitating the extension of ggplot2 in form of developing additional geoms, which is exactly
what the article illustrates.}

\hh{XXX there are quite a few other extensions that we should mention at this point: GGally \citep{ggally}, ggbio \citep{ggbio}, ... XXX need to add}

\hh{There are two main approaches to making use of the ggplot2 framework: (i) implement network visualizations using ggplot2, i.e. providing a wrapper for the user to visualize a network with ggplot2 elements, and (ii) implement networks as an internal layer of ggplot2.  For the second approach, two main implementations exist. We will discuss all of these  in this paper. }

\hh{XXX Provide roadmap for the rest of the paper. }



\section{Three implementations of network visualizations}

\subsection{ggnet2}
\subsection{geom\_net}
\subsection{geom\_node and geom\_edge}

\section{Examples}

In this section, we demonstrate the current capabilities of \texttt{ggnet2}, {geom\_net} and \code{ggnetwork} in a series of side by side examples.
For each of these examples, we are going to present the code necessary to produce the network, and discuss it in detail.

  \subsection{Blood Donation}
  In this directed network, there are eight vertices and 27 edges.  The vertices represent the eight different blood types in humans that are most important for donation: the ABO blood types A, B, AB, and O, combined with the RhD positive (+) and negative (-) types. The edges are directed: a person whose blood type is that of a \emph{from} vertex can to donate blood to a person whose blood type is that of a corresponding \emph{to} vertex. In the example below, loops are removed because loops exist on every vertex in this example, as blood between two people of matching ABO and RhD type can always be exchanged.

<<blood_common>>=
data(blood)
@

<<blood_ex_ggnet2, echo=TRUE, fig.width=6, fig.height=6>>=
ggnet2(network(blood$edges[, 1:2]), mode = "circle", size = 15,
       label = TRUE, arrow.size = 7.5, arrow.gap = 0.95, vjust = 0.5,
       node.color="darkred", label.color="grey80")
@

<<blood_ex_ggnet, echo=TRUE, fig.width=6, fig.height=6>>=
ggplot(data = blood$edges, aes(from_id = from, to_id = to)) +
  geom_net(colour = "darkred", layout = "circle", label = TRUE, size = 15,
           directed = TRUE, vjust = 0.5, labelcolour = "grey80",
           arrowsize = 1.5, linewidth = 0.75, arrowgap = 0.05) +
  theme_net()
@

<<blood_ex_ggnetwork, echo=TRUE, fig.width=6, fig.height=6>>=
ggplot(ggnetwork(network(blood$edges[, 1:2]), layout = "circle"),
       aes(x, y, xend = xend, yend = yend)) +
  geom_edges(arrow = arrow(length = unit(7.5, "pt"), type = "closed")) +
  geom_nodes(size = 15, color = "darkred") +
  geom_nodetext(aes(label = vertex.names), color = "grey80") +
  theme_blank()
@

This network is shown in figure \ref{fig.cap:blood_ex}.  Here, we have used the aesthetics \texttt{colour} and \texttt{size} set to identity values to change the size and color of all vertices. We have also used the \texttt{layout} and \texttt{label} arguments to change the default layout to a circle layout and to print the blood types, respectively. The circle layout places blood types of the same ABO type next to each other and spreads the vertices out far enough to distinguish between the various ``in" and ``out" types.  You can tell clearly from this plot that the O- type is the universal donor: it has an out-degree of seven and an in-degree of zero. Additionally, we can see that the AB+ type is the universal recepient, with an in-degree of seven and an out-degree of zero. Anyone looking at this plot can quickly determine which type(s) of blood they can receive and which type(s) can receive their blood.

\begin{figure}
\begin{subfigure}[t]{.32\textwidth}
\caption{ggnet2}
\includegraphics[width=\textwidth]{figure/blood_ex_ggnet2-1.pdf}
\end{subfigure}
\begin{subfigure}[t]{.32\textwidth}
\caption{geom\_net}
\includegraphics[width=\textwidth]{figure/blood_ex_ggnet-1.pdf}
\end{subfigure}
\begin{subfigure}[t]{.32\textwidth}
\caption{ggnetwork}
\includegraphics[width=\textwidth]{figure/blood_ex_ggnetwork-1.pdf}
\end{subfigure}
\caption{\label{fig.cap:blood_ex} Network of blood donation possibilities in humans by ABO and RhD blood types.}
\end{figure}
\afterpage{\clearpage}

\subsection{Email Network}

  This email network comes from the 2014 VAST Challenge \citep{emailnet}. It is a directed network of emails between company employees with 55 vertices and 9,063 edges. Each vertex is an employee of the company, and each edge is an email sent from one employee to one or more other employees. The arrow of the directed edge points to the recipient(s) of the email. The network contains two business weeks of emails across the entire company. In order to better visualize the structure of the communication network between employees, emails that were sent out to all employees are removed in the subsequent examples.


\begin{figure}
\begin{subfigure}[t]{\textwidth}
\caption{ggnet2}
<<email_ex_ggnet2, size="footnotesize", opts.label="codefig", echo=TRUE, out.width='\\textwidth'>>=
em.cet = as.character(
  email$nodes$CurrentEmploymentType)
names(em.cet) = email$nodes$label

edges <- subset(email$edges, nrecipients < 54)
em.net = edges[, c("From", "to") ]
em.net = network(em.net)
em.net %v% "curr_empl_type" = 
  em.cet[ network.vertex.names(em.net) ]

ggnet2(em.net, color = "curr_empl_type", 
       size = 4, palette = "Set1", 
       arrow.size = 10, arrow.gap = 0.95, 
       edge.alpha = 0.5, 
       color.legend = "Employment Type") +
  theme(legend.position="bottom")
@

\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{geom\_net}
<<email_ex, size="footnotesize", opts.label="codefig", echo=TRUE, out.width='\\textwidth'>>=
emailnet <- merge(
  subset(email$edges, nrecipients < 54), email$nodes, 
  by.x="From", by.y="label", all=TRUE)

ggplot(data = emailnet, 
       aes(from_id = From, to_id = to)) +
  geom_net(aes(colour= CurrentEmploymentType), 
           linewidth=0.5, ealpha=0.5, size=4, 
           directed=TRUE) +
  scale_colour_brewer("Employment Type", 
                      palette="Set1") + 
  theme_net() + 
  theme(legend.position="bottom")
@
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{ggnetwork}
<<email_ex_ggnetwork, size="footnotesize", opts.label="codefig", echo=TRUE, out.width='\\textwidth'>>=
ggplot(ggnetwork(em.net), 
       aes(x, y, xend = xend, yend = yend)) +
  geom_edges(
    alpha = 0.5, color = "grey50",
    arrow = arrow(length = unit(10, "pt"), 
                  type = "closed")) +
  geom_nodes(aes(color = curr_empl_type), 
             size = 4) +
  scale_color_brewer("Employment Type", 
                     palette = "Set1") +
  theme_blank() +
  theme(legend.position = "bottom")
@
\end{subfigure}

\caption{\label{fig.cap:email_ex} Email network within a company over a two week period.}
\end{figure}
\afterpage{\clearpage}

This network is plotted in figure \ref{fig.cap:email_ex}.  There are six distinct clusters in this network which almost perfectly correspond to the six different types of employee in this company: administration, engineering, executive, facilities, information technology, and security. %Unfortunately, there is currently no legend to associate color with employment type. This will be remedied in the final version of our geometry.
Additionally, the edges between employees in the same cluster are  darker than edges between employees in different clusters. This is due to the value of the \texttt{ealpha} aesthetic: more emails between two employees lead to darker edges.  The value is set to 0.1 in this example, so that ten or more emails between two employees result in a completely opaque edge. This pattern of heavy communication between employees of the same type is fairly unsurprising. 

To make this visualization more interesting and informative, we facet the network by day: each panel in \ref{fig:email_ex_facet} shows the different email networks associated with each day of the week.


<<email_ex_facet_ggnet2, fig.height=4, fig.width=8, fig.cap = 'All emails within a company over a two week period facetted by day of the month.',echo=TRUE, out.width='\\textwidth'>>=
# source for ggnet2
em.day = subset(email$edges, nrecipients < 54)[, c("From", "to", "day") ]
em.day = lapply(unique(em.day$day), function(x) subset(em.day, day == x)[, 1:2 ])
em.day = lapply(em.day, network, directed = TRUE)
for (i in 1:length(em.day)) {
  em.day[[ i ]] %v% "curr_empl_type" = em.cet[ network.vertex.names(em.day[[ i ]]) ]
  em.day[[ i ]] %n% "day" = unique(email$edges$day)[ i ]
}

g = list(length(em.day))
for (i in 1:length(em.day)) {
  g[[ i ]] = ggnet2(em.day[[ i ]], size = 2, color = "curr_empl_type",
                    palette = "Set1", arrow.size = 0, arrow.gap=0.01,
                    edge.alpha = 0.1, legend.position = "none") +
    ggtitle(paste("Day", em.day[[ i ]] %n% "day")) +
    theme(panel.border = element_rect(color = "grey50", fill = NA))
}
gridExtra::grid.arrange(grobs = g, nrow = 2)
@

<<email_ex_facet, fig.height=5, fig.width=8, fig.cap = 'All emails within a company over a two week period facetted by day of the month.',echo=TRUE, out.width='\\textwidth'>>=
# source for geom_net

# data step: making sure that there is one entry for each person on each day
employee <- data.frame(expand.grid(label=unique(email$nodes$label),
                                   day=unique(email$edges$day)))
employee <- merge(employee, email$nodes, by="label")
emailnet <- merge(subset(email$edges, nrecipients < 54), employee, 
                  by.x=c("From", "day"), by.y=c("label", "day"), all=TRUE)

# creating the plot
ggplot(data = emailnet, aes(from_id = From, to_id = to)) +
  geom_net(aes(colour= CurrentEmploymentType), fiteach=TRUE, linewidth=0.5, 
           ealpha=0.5, size=2, directed=TRUE, arrowsize=.5) +
  scale_colour_brewer(palette="Set1") + theme_net() +
  facet_wrap(~day, nrow = 2, labeller="label_both") +
  theme(legend.position="bottom",
        panel.border = element_rect(fill=NA, colour = "grey60"))
@

<<email_ex_facet_ggnetwork, fig.height=4, fig.width=8, fig.cap = 'All emails within a company over a two week period facetted by day of the month.',echo=TRUE, out.width='\\textwidth'>>=
# source for ggnetwork
em.day = subset(email$edges, nrecipients < 54)[, c("From", "to", "day") ]
em.day = lapply(unique(em.day$day), function(x) subset(em.day, day == x)[, 1:2 ])
em.day = lapply(em.day, network, directed = TRUE)
for (i in 1:length(em.day)) {
  em.day[[ i ]] %v% "curr_empl_type" = em.cet[ network.vertex.names(em.day[[ i ]]) ]
  em.day[[ i ]] %n% "day" = unique(email$edges$day)[ i ]
}

g = list(length(em.day))
for (i in 1:length(em.day)) {
  g[[ i ]] = ggplot(ggnetwork(em.day[[ i ]]), aes(x, y, xend = xend, yend = yend)) +
    geom_edges(color = "grey50",
               arrow = arrow(length = unit(6, "pt"), type = "closed")) +
    geom_nodes(aes(color = curr_empl_type)) +
    scale_colour_brewer(palette = "Set1") +
    theme_blank() +
    theme(legend.position = "none") +
    ggtitle(paste("Day", em.day[[ i ]] %n% "day"))
}
gridExtra::grid.arrange(grobs = g, nrow = 2)
@

\begin{figure}
\begin{subfigure}[t]{\textwidth}
\caption{ggnet2}
\includegraphics[width=\textwidth]{figure/email_ex_facet_ggnet2-1.pdf}
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{geom\_net}
\includegraphics[width=\textwidth]{figure/email_ex_facet-1.pdf}
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{ggnetwork}
\includegraphics[width=\textwidth]{figure/email_ex_facet_ggnetwork-1.pdf}
\end{subfigure}

\caption{\label{fig:email_ex_facet} The same email network as in figure~\ref{fig.cap:email_ex} facetted by day of the week.}
\end{figure}
%
This plot is shown in Figure~\ref{fig:email_ex_facet}. With the facetting, we can see that there are several days where one or more departments do not communicate with any of the other departments. There are only two days, 13 and 15, without any isolated department communications. Facetting is one of the major benefits of creating a geometry for networks in \texttt{ggplot2}.  Facetting quickly separates dense networks into separate subnetworks for easy visual comparison and  analyses.

\subsection{\texttt{ggplot2} Theme Elements}
This example comes from the \texttt{theme()} help page in the \texttt{ggplot2} documentation \citep{ggplot}.  It is a directed network which shows the structure of the inheritance of theme options in the construction of a \texttt{ggplot2} plot.  There are 53 vertices and 36 edges in this network. Each vertex represents one possible theme option. There is an arrow from one theme option to another if the element represented by the \emph{to} vertex inherits its values from the \emph{from} vertex.  For example, the \texttt{axis.ticks.x} option inherits its value from the \texttt{axis.ticks} value, which in turn inherits its value from the \texttt{line} option.  Thus, setting the \texttt{line} option to a value such as \texttt{element\_blank()} sets the entire inheritance tree to \texttt{element\_blank()}, and no lines appear anywhere on the plot background. Finally, we note that the vertices with no edges were incorporated into the plot by adding their labels to the edges data frame in both the  `from\_id' and `to\_id' columns before passing the edges data frame to \texttt{ggplot}.



\begin{figure}
\begin{subfigure}[t]{\textwidth}
\caption{ggnet2}
<<theme_ex_ggnet2, size="footnotesize", opts.label="codefig", echo=TRUE>>=
te.net = network(theme_elements$edges)
te.net %v% "size" = 
  sqrt(10 * (sna::degree(te.net) + 1))

ggnet2(te.net, label = TRUE, color = "white",
       label.size = "size", layout.exp = 0.15)
@
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{geom\_net}
<<theme_ex_ggnet, size="footnotesize", opts.label="codefig", echo=TRUE>>=
# data step: merge nodes and edges and 
# introduce a degree-out variable
library(dplyr)
TEnet <- merge(
  theme_elements$edges, 
  theme_elements$vertices, 
  by.x = "parent", by.y = "name", all = TRUE)
TEnet <- TEnet %>% group_by(parent) %>% 
  mutate(degree = sqrt(10*n()+1))

# create plot:
ggplot(data = TEnet, 
       aes(from_id = parent, to_id = child)) +
  geom_net(
    aes(fontsize=degree), directed = TRUE, 
    label = TRUE, vjust = -.5, size = 3, 
    ecolour = "grey70") +
  theme_net() + xlim(c(-0.05, 1.05))
@
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{ggnet2}
<<theme_ex_ggnetwork, size="footnotesize", opts.label="codefig", echo=TRUE>>=
te.net = network(theme_elements$edges)
te.net %v% "size" = 
  sqrt(10 * (sna::degree(te.net) + 1))

ggplot(ggnetwork(te.net), 
       aes(x, y, xend = xend, yend = yend)) +
  geom_edges() +
  geom_nodes(size = 12, color = "white") +
  geom_nodetext(
    aes(size = size, label = vertex.names)) +
  scale_size_continuous(range = c(3, 5)) +
  guides(size = FALSE) +
  theme_blank()
@
\end{subfigure}

\caption{\label{fig.cap:theme_ex} Inheritance structure of \texttt{ggplot2} theme elements. This is a recreation of the graph found at \protect\url{http://docs.ggplot2.org/current/theme.html}.}
\end{figure}
\afterpage{\clearpage}

The inheritance structure is plotted in figure \ref{fig.cap:theme_ex}.  In this plot, it is easy to quickly determine the parent and child vertices. Using this plot made creation of the \texttt{theme\_net} object used throughout these examples very simple. We just made set each of the major parent elements, \texttt{text}, \texttt{rect}, and \texttt{line} to \texttt{element\_blank()} and then set the aspect ratio equal to one.

\subsection{Mad Men Networks}
  The following code creates the network example given in the introduction. We changed the vertex size and edge color for all vertices and edges, included vertex labels, and colored the vertices according to the character's gender.
<<print_ex, ref.label="madmen_ex_ggnet", eval=FALSE, echo=TRUE,cache=FALSE>>=
@

The code for the other two approaches follows below and the corresponding networks are shown in figure~\ref{fig:madmen-2}.

<<madmen_ex_ggnet2, echo=TRUE, dependson='reading_data',  out.width='\\textwidth', fig.width=9, fig.height=9>>=
# source for ggnet2
plot(1:10, 1:10)
@

<<madmen_ex_ggnetwork, echo=TRUE,  out.width='\\textwidth', fig.width=9, fig.height=9>>=
# source for ggnetwork
rownames(madmen$vertices) = madmen$vertices$label
mm.net = network(madmen$edges[, 1:2], directed = FALSE)
mm.net %v% "Gender" = as.character(madmen$vertices[ network.vertex.names(mm.net), "Gender"])

ggplot(data = ggnetwork(mm.net), aes(x, y, xend = xend, yend = yend)) +
  geom_edges(color = "grey50") +
  geom_nodes(aes(colour = Gender), size = 4) + # label= TRUE, vjust = -0.6
  geom_nodetext(aes(colour = Gender, label = vertex.names), size = 4, vjust = -0.6) +
  scale_colour_manual(values = c( "#FF69B4", "#0099ff")) +
  xlim(c(-0.05, 1.05)) +
  theme_blank() +
  theme(legend.position = "bottom")
@


\begin{figure}[hbtp]
\begin{subfigure}[t]{.495\textwidth}
\caption{ggnet2}
\includegraphics[width=\textwidth]{figure/madmen_ex_ggnet2-1.pdf}
\end{subfigure}
\begin{subfigure}[t]{.495\textwidth}
\caption{ggnetwork}
\includegraphics[width=\textwidth]{figure/madmen_ex_ggnetwork-1.pdf}
\end{subfigure}

\caption{\label{fig:madmen-2} Graph of the characters in the show Mad Men who are linked by a romantic relationship, ggnet2 and ggnetwork implementation.}
\end{figure}
\afterpage{\clearpage}

 There is another Mad Men network included in the \texttt{gcookbook} package \citep{madmen}. It is a directed network, also of romantic relationships between characters, but it also includes advances made by one character that were rejected by the other.  For example, Roger Sterling made advances toward Betty Draper, but Betty refused him, and so there is a directed edge going from Roger to Betty, but not from Betty to Roger.  If the advance is reciprocated, like between Sal Romano and the Bellhop, there are two directed edges between the two vertices.






\begin{figure}
\begin{subfigure}[t]{\textwidth}
\caption{ggnet2}
<<madmen2_ex_ggnet2, size="footnotesize", opts.label="codefig", echo=TRUE>>=
rownames(mm.directed$vertices) = mm.directed$vertices$label
mm.directed$vertices$Gender = 
  as.character(mm.directed$vertices$Gender)

mm.dir = network(mm.directed$edges, 
                 directed = TRUE)
mm.dir %v% "gender" = 
  mm.directed$vertices[ 
    network.vertex.names(mm.dir), "Gender" ]

# gender color palette
mm.col = c("female" = "#ff69b4", 
           "male" = "#0099ff")

ggnet2(mm.dir, mode = "fruchtermanreingold", size = 3,
       color = mm.col[ mm.dir %v% "gender" ],
       label = TRUE, 
       label.color = mm.col[ mm.dir %v% "gender" ],
       hjust = -0.1, legend.position = "bottom", 
       layout.exp = 0.15, arrow.size = 10)
@
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{geom\_net}
<<madmen2_ex_ggnet, size="footnotesize", opts.label="codefig", echo=TRUE>>=
MM2net <- merge(
  mm.directed$edges, 
  mm.directed$vertices, 
  by.x="Name1", by.y="label", all=TRUE)

ggplot(data = MM2net, 
       aes(from_id = Name1, to_id = Name2)) +
  geom_net(
    aes(colour=Gender),  directed = TRUE, 
    label = TRUE, ecolour = "grey50", 
    linewidth = 0.5, size = 2.5, vjust = -.5,
    layout='fruchtermanreingold') +
  scale_colour_manual(
    values = c( "#FF69B4", "#0099ff")) +
  theme_net() + xlim(c(-.1, 1.1)) + 
  theme(legend.position = "bottom")
@
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{ggnetwork}
<<madmen2_ex_ggnetwork, size="footnotesize", opts.label="codefig", echo=TRUE>>=
ggplot(
  ggnetwork(mm.dir, 
            layout = "fruchtermanreingold"),
       aes(x, y, xend = xend, yend = yend)) +
  geom_edges(
    color = "grey50", 
    arrow = arrow(length = unit(10, "pt"), 
                  type = "closed")) +
  geom_nodes(size = 3, 
             color = mm.col[ mm.dir %v% "gender" ]) +
  geom_nodetext(aes(label = vertex.names), 
                color = mm.col[ mm.dir %v% "gender" ], 
                hjust = -0.1) +
  theme_blank() +
  theme(legend.position = "bottom")
@
\end{subfigure}

\caption{\label{fig.cap:madmen2_ex} A directed network of relationships in Mad Men.}
\end{figure}
This network is shown in figure \ref{fig.cap:madmen2_ex}.  It is a lot more densely connected than the previous Mad Men example.  This network allows us to see much more of the drama in the show. For instance, we can see that Roger made advances towards Betty, his business partner's wife, which is much more scandalous than what appears in the first network.

\subsection{College Football}
This next example comes from M.E.J. Newman's network data web page \citep{football}.  It is an undirected network consisting of all regular season college football games played between Division I schools in Fall of 2000.  There are 115 vertices and 613 edges: each vertex represents a school, and an edge represents a game played between two schools. There is an additional variable in the vertex data frame corresponding to the conference each team belongs to, and there is an additional variable in the edge data frame that is equal to one if the game occured between teams in the same conference or zero if the game occured between teams in different conferences.

The network of football games is given in figure \ref{fig.cap:football_ex}. Here, we have changed the \texttt{linetype} aesthetic to correspond to games that occur between teams in the same conference or different conferences.  These lines are dotted and solid, respectively. We have also assigned a different color to each conference, and the vertices and their labels are colored according to their conference. This coloring and changing of the linetypes make the structure of the game network easier to view.  There is one conference consisting of Navy, Notre Dame, Utah State, Central Florida, and Connecticut, which is spread out, whereas most other conferences' teams are all very close to each other because they play within conference much more than they play out of conference.  At the time, these five schools were all independents and did not have a home conference.  Without the coloring capability, we would not have been able to pick out that difference as easily.
\begin{figure}
\begin{subfigure}[t]{\textwidth}
\caption{ggnet2}\vspace{-.5cm}
<<football_ex_ggnet2, size="footnotesize", opts.label="codefig", echo=TRUE>>=
rownames(football$vertices) = football$vertices$label

fb.net = network(football$edges[, 1:2], directed = FALSE)
set.edge.attribute(fb.net, "same.conf", football$edges$same.conf)
fb.net %v% "conf" = football$vertices[ network.vertex.names(fb.net), "value" ]

ggnet2(fb.net, mode = "fruchtermanreingold",
       color = "conf", color.legend = "Conference", palette = "Paired",
       edge.color = c("color", "grey75"))
@
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{geom\_net}\vspace{-.5cm}
<<football_ex, size="footnotesize", fig.height=11, opts.label="codefig", echo=TRUE>>=
# data step: merge vertices and edges
# label independent schools
ftnet <- merge(
  football$edges, football$vertices, 
  by.x="from", by.y="label", all=TRUE)

sid <- ftnet$value == "Independents"
ftnet$schools <- ""
ftnet$schools[sid] <- ftnet$from[sid]

# create data plot
ggplot(data=ftnet, aes(from_id=from, to_id=to)) +
  geom_net(
    aes(colour = value, 
        linetype = factor(same.conf == 1), 
        label = schools),
    linewidth = 0.5,
    size = 6, vjust = -0.75, alpha = 0.3, 
    layout = 'fruchtermanreingold') + 
  theme_net() +
  theme(legend.position="bottom") + xlim(c(-0.05, 1.05)) +
  scale_colour_brewer("Conference", palette="Paired")  +
  scale_linetype_manual("Same Conference", values=c(2,1))
@
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{ggnetwork}\vspace{-.5cm}
<<football_ex_ggnetwork, size="footnotesize", opts.label="codefig", echo=TRUE>>=
ggplot(
  ggnetwork(fb.net, layout = "fruchtermanreingold"),
  aes(x, y, xend = xend, yend = yend)) +
  geom_edges(
    aes(linetype = as.logical(same.conf)), 
    color = "grey50") +
  geom_nodes(aes(color = conf), size = 4) +
  scale_color_brewer("Conference", 
                     palette = "Paired") +
  guides(linetype = FALSE) +
  theme_blank()
@
\end{subfigure}
\caption{\label{fig.cap:football_ex} The network of regular season Division I college football games in the season of fall 2000. The vertices and their labels are colored by conference.}
\end{figure}
\afterpage{\clearpage}

\subsection{Les Mis\'{e}rables}
This next network comes from \citet{lesmis}. It is an undirected network of coappearances of characters in Victor Hugo's \emph{Les Mis\'{e}rables}.  There are 77 vertices representing each of the 77 characters in the book, and an edge connects two vertices if those two characters appear in the same chapter of the book.  There are 254 edges in this network. The edges are also weighted by the number of coappearances. The largest weighting is 31, between the characters Jean Valjean and Cosette.  
This network is shown in figures~\ref{fig.cap:lesmis_ex:ggnet2},~\ref{fig.cap:lesmis_ex:ggnet}, and~\ref{fig.cap:lesmis_ex:ggnetwork}. This network reveals many important character groups, as well as the main characters in the story.  The main characters are the ones with high degree, like Valjean, Cosette, and Javert.  There is an extremely wide edge connecting Valjean and Cosette, which implies that they are strongly connected; in fact, Cosette is Valjean's adopted daughter.

<<lesmis_ex_ggnet2, echo=TRUE>>=
# source for ggnet2
ggnet2(lesmis$edges[, 1:2 ], mode = "kamadakawai", color = "white", label = TRUE,
       edge.size = lesmis$edges$degree / mean(lesmis$edges$degree),
       layout.exp = 0.25)
@

<<lesmis_ex_ggnet, echo=TRUE, fig.width=9.5>>=
# source for geom_net

# data step: merge vertices and edges
lesmisnet <- merge(lesmis$edges, lesmis$vertices, by.x="from", by.y="label", all=TRUE)
lesmisnet$degree[is.na(lesmisnet$degree)] <- 0

# create data plot
ggplot(data = lesmisnet, aes(from_id = from, to_id = to, 
                             linewidth = degree/5 + 0.1 )) +
  geom_net(colour = "grey30",  aes(size = degree, alpha=degree),
           ecolour = "grey60", vjust = -0.75,
           layout = 'fruchtermanreingold', label = TRUE) +
  theme_net() + scale_alpha(range=c(0.3, 1))
@

\begin{figure}
\includegraphics[width=\textwidth]{figure/lesmis_ex_ggnet2-1.pdf}
\caption{\label{fig.cap:lesmis_ex:ggnet2} Co-appearance network of characters in Victor Hugo's \emph{Les Mis\'{e}rables} using ggnet2.}
\end{figure}
%
\begin{figure}
\includegraphics[width=\textwidth]{figure/lesmis_ex_ggnet-1.pdf}
\caption{\label{fig.cap:lesmis_ex:ggnet} Co-appearance network of characters in Victor Hugo's \emph{Les Mis\'{e}rables} using geom\_net.}
\end{figure}
%
\begin{figure}
%\includegraphics[width=\textwidth]{figure/lesmis_ex_ggnetwork-1.pdf}
\hh{include ggnetwork example}
\caption{\label{fig.cap:lesmis_ex:ggnetwork} Co-appearance network of characters in Victor Hugo's \emph{Les Mis\'{e}rables} using ggnetwork.}
\end{figure}
%
\afterpage{\clearpage}

\subsection{Bikesharing in D.C.}
The data shows the second quartal trips in 2015 taken with bikes from the bike share company https://secure.capitalbikeshare.com/.
While this bikesharing company is located in the heart of Washington D.C.\ they do have a set of bike stations just outside of Washington in  Rockville, MD and north of it.
Each station is shown as a dot, lines between stations indicate that at least five trips were taken between these two stations; the wider the line, the more trips have been taken between stations. In order to reflect distance between stations, we use as an additional restriction that the fastest trip was at most ten minutes long.

<<bikes_ex, echo=TRUE, fig.cap="Bikesharing in Rockville", warning=FALSE, fig.keep='all'>>=
tripnet <- merge(bikes$trips, bikes$stations, by.x="Start.station", by.y="name", all=TRUE)

tripnet$Metro = FALSE
idx <- grep("Metro", tripnet$Start.station)
tripnet$Metro[idx] <- TRUE

ggplot(aes(from_id=Start.station, to_id=End.station), data=tripnet) +
  geom_net(aes(linewidth=n/15, colour=Metro), label=TRUE, vjust=-0.5) +
  theme_net() + xlim(c(-0.1, 1.1)) +
  scale_colour_manual("Metro Station", values=c("grey40", "darkorange")) +
  theme(legend.position="bottom")
# compare to https://secure.capitalbikeshare.com/map/

ggplot(aes(from_id=Start.station, to_id=End.station),  data=tripnet) +
  geom_net(layout=NULL, label=TRUE, vjust=-0.5,
           aes(x=long, y=lat, linewidth=n/15, colour=Metro)) +
  theme_net() +
  scale_colour_manual("Metro Station", values=c("grey40", "darkorange")) +
  theme(legend.position="bottom")

@

\begin{figure}
\centering
\includegraphics[width=.49\textwidth]{figure/bikes_ex-1.pdf}
\includegraphics[width=.49\textwidth]{figure/bikes_ex-2.pdf}
\caption{\label{fig:bikes} Network of bike trips using a Kamada-Kawai layout (left) and a geographically true representation (right, \hh{XXX I would like to include a ggmap here, we need to wait until that package is fixed}). Metro stations are shown in orange. In the Kamada-Kawai layout based on the trips taken, metro stations take a much more central position than in the geographically true representation. }
\end{figure}
\afterpage{\clearpage}


\subsection{Protein Interaction Network in Yeast}
  This example of a protein interaction network comes from \citet{protein}. It is the complete protein-protein interaction network in the yeast species \emph{S. cerevisiae}. There are 1,870 proteins that make up the vertices of this network, and there are 2,240 edges between them.  These edges represent ``direct physical interactions" between any two proteins \citep[][p. 42]{protein}. These interactions and their associated proteins are plotted  in figure \ref{fig.cap:yeast_ex}.  We also demonstrate the layout capabilities by changing the layout to random and setting the distribution to \texttt{"uniang"}, which is a  ``gaussian donut" layout.  Indeed, we see a nearly round area in the middle of the graph where the layout parameter has forced there to be no vertices.

<<yeast_ex_ggnet2, echo=TRUE, cache=FALSE>>=
# plot with ggnet2
ggnet2(network(protein$edges[,1:2]), size = 2, color = "magenta",
       mode = "random", layout.par = list(dist = "uniang"),
       edge.alpha = 0.05)
@

<<yeast_ex, echo=TRUE, cache=FALSE>>=
# plot with geom_net
ggplot(data = protein$edges, aes(from_id = from, to_id = to)) +
  geom_net(alpha=0.25, ealpha = .05, size=2, colour = 'magenta',
           ecolour="grey70", linewidth=0.5,
           layout = 'random', layout.par = list(dist = 'uniang')) +
  theme_net()
@



\begin{figure}
\begin{subfigure}[t]{.49\textwidth}
\caption{ggnet2}
\includegraphics[width=\textwidth]{figure/yeast_ex_ggnet2-1.pdf}
\end{subfigure}
%
\begin{subfigure}[t]{.49\textwidth}
\caption{geom\_net}
\includegraphics[width=\textwidth]{figure/yeast_ex-1.pdf}
\end{subfigure}
\caption{\label{fig.cap:yeast_ex} Protein-protein interaction network in \emph{S. cerevisiae}. The layout is random.}
\end{figure}
\afterpage{\clearpage}

\section{Summary}

This file is only a basic article template. For full details of \emph{The R Journal} style and information on how to prepare your article for submission, see the \href{http://journal.r-project.org/share/author-guide.pdf}{Instructions for Authors}.

\bibliography{tyner-briatte-hofmann}

\address{Samantha Tyner\\
  Department of Statistics and Statistical Laboratory\\
  Iowa State University\\
  United States\\}
\email{sctyner@mail.iastate.edu}

\address{Fran\c{c}ois Briatte\\
  Affiliation\\
  Address\\
  Country\\}
\email{francois.briatte@sciencespo.fr}

\address{Heike Hofmann\\
  Department of Statistics and Statistical Laboratory\\
  Iowa State University\\
  United States\\}
\email{hofmann@mail.iastate.edu}
