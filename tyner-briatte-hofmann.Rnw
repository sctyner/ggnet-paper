% !TeX root = RJwrapper.tex
\title{Network Visualizations in \CRANpkg{ggplot2}}
\author{by Sam Tyner, Fran\c{c}ois Briatte and  Heike Hofmann}

\maketitle

\abstract{
An abstract of less than 150 words.
}

<<setup_knitr, echo=FALSE>>=
library(knitr)
opts_chunk$set(
  tidy = FALSE, echo=FALSE, cache=FALSE, eval = TRUE,
  message = FALSE, warning = FALSE, highlight = FALSE, background = '#FFFFFF',
  fig.height = 8, fig.width = 8, fig.align = 'center', fig.show='hide'
)


## From Josh O'Brien's stackoverflow answer:
## http://stackoverflow.com/questions/11030898/knitr-how-to-align-code-and-plot-side-by-side
## These two settings control text width in codefig vs. usual code blocks
partWidth <- 35
fullWidth <- 80
options(width = fullWidth)

##  (1) CHUNK HOOK FUNCTION
##   First, to set R's textual output width on a per-chunk basis, we
## need to define a hook function which temporarily resets global R's
## option() settings, just for the current chunk
knit_hooks$set(r.opts=local({
    ropts <- NA
    function(before, options, envir) {
        if (before) {
            ropts <<- options(options$r.opts)
        } else {
            options(ropts)
        }
    }
}))

## (2) OUTPUT HOOK FUNCTION

##   Define a custom output hook function. This function processes _all_
## evaluated chunks, but will return the same output as the usual one,
## UNLESS a 'codefig' argument appeared in the chunk's header.  In that
## case, wrap the usual textual output in LaTeX code placing it in a
## narrower adjustbox environment and setting the graphics that it
## produced in another box beside it.

defaultChunkHook <- environment(knit_hooks[["get"]])$defaults$chunk

codefigChunkHook <- function (x, options) {
        main <-  defaultChunkHook(x, options)
        before <-
            "\\vspace{1em}\n
             \\begin{adjustbox}{valign=t}\n
             \\begin{minipage}{.49\\textwidth}\n"
        after <-
            paste("\\vspace{1em}\n
                   \\end{minipage}\n
                  \\begin{minipage}{.49\\textwidth}\n",
                   paste0("\\includegraphics[width=\\textwidth]{figure/",
                          options[["label"]], "-1.pdf}\n
                          \\end{minipage}\n
                          \\end{adjustbox}"),
                          sep="\n")
    ## Was a codefig option supplied in chunk header?
    ## If so, wrap code block and graphical output with needed LaTeX code.
    if (!is.null(options$codefig)) {
      return(sprintf("%s %s %s", before, main, after))
    } else {
      return(main)
    }
}

knit_hooks[["set"]](chunk = codefigChunkHook)


## (3) TEMPLATE
##   codefig=TRUE is just one of several options needed for the
## side-by-side code block and a figure to come out right. Rather
## than typing out each of them in every single chunk header, we
## define a _template_ which bundles them all together. Then we can
## set all of those options simply by typing opts.label="codefig".

opts_template[["set"]](
codefig = list(codefig=TRUE, fig.show = "hide",
               r.opts = list(width=partWidth),
               tidy.opts = list(width.cutoff = partWidth)))

@

<<load_packages, results='hide'>>=
## ggplot2
library(ggplot2) # needs to be version â‰¥ 1.0.1.9003

## ggnet
if (!require(ggnet, quietly = TRUE)) {
  devtools::install_github("sctyner/ggnet")
}
library(ggnet)

## ggnetwork
if (!require(ggnetwork, quietly = TRUE)) {
  devtools::install_github("briatte/ggnetwork")
}
library(ggnetwork)

## ggnet2
source("https://raw.githubusercontent.com/briatte/ggnet/master/ggnet2.R")
@

<<read_data, eval=TRUE, echo=FALSE>>=
data(madmen)

# set up networks for all of the data sets
MMnet <- merge(madmen$edges, madmen$vertices, by.x="Name1", by.y="label", all=TRUE)
levels(MMnet$Gender) <- c("female", "male")
@

% introductory section
\hh{We need a slightly more gentle intro to networks. }
At its core, a network is simply a set of points connected in pairs by a set of lines \citep{newman}.  Here, we refer to the lines as edges and the points as vertices, although these are also called nodes.  These two seemingly simple sets of graphical objects, points and segments, are used to encode a huge variety and quantity of information across many fields of study. For instance, networks of scientific collaboration, a food web of marine animals, and American college football games are all covered in a paper on community detection in networks by \citet{football}.  \citet{networkfailures} examine node failure in interdependent networks like power grids.  Social networks, such as links between actors found on \url{www.imdb.com}, and neural networks, like the completely mapped neural network of the \textit{C. elegans} worm are also etensively studied \citep{smallworld}.  Networks vary widely in scope and complexity: the smallest network is simply an edge between two vertices, while one of the most commonly used and most complex networks, the world wide web, has billions of vertices (webpages) and billions of edges (hyperlinks) connecting them.  The edges in a network can  be directed or undirected: directed edges represent information travelling from one vertex to another, and switching the direction would change the structure of the network. The world wide web is an example of a directed network because one webpage may link to another, but not necessarily the other way around. Undirected edges are simply connections between vertices. In co-authorship networks nodes are authors connected by an edge, if they author an academic publication together. Co-authorship networks are examples of undirected networks because if two people author a paper together, it creates a connection between them that is bidirectional.

\par A social network is a network that everyone is a part of in one way or another.  We do not necessarily refer here to social media like Facebook or LinkedIn, but rather to the connections we form with other people. To demonstrate the functionality of our geometry for plotting networks, we have chosen an example of a social network from the popular television show Mad Men.  This network, compiled by \citet{madmen}, is made up of 52 vertices and 87 edges. Each vertex represents a character on the show, and there is an edge between every two characters who have had a romantic relationship.

Figure~\ref{fig.cap:madmen_ex} shows this network.
In the plot, we can see one central character who has many more relationships than any other character. This vertex represents the main character of the show, Don Draper, who is quite the ``ladies' man."  This example shows just how ubiquitous networks are. %% if we have to say that something is fun, it no longer is ...

\begin{figure}[hbtp]
\centering
<<madmen_ex_ggnet, dependson='reading_data', fig.cap = 'Network of Relationships in Mad Men', out.width='\\textwidth', fig.width=9, fig.height=9>>=
library(ggplot2)
ggplot(data = MMnet, aes(from_id = Name1, to_id = Name2)) +
  geom_net(aes(colour=Gender), size=4, label= TRUE, vjust=-0.6,
           ecolour="grey50") +
  scale_colour_manual(values=c( "#FF69B4", "#0099ff")) +
  xlim(c(-0.05, 1.05)) +
  theme_net() +
  theme(legend.position = "bottom")
@
\includegraphics[width=\textwidth]{figure/madmen_ex_ggnet-1.pdf}
\caption{\label{fig.cap:madmen_ex} \hh{we only need one example here, this is not yet a start into the comparison of the different implementations} Graph of the characters in the show Mad Men who are linked by a romantic relationship.}
\end{figure}
\afterpage{\clearpage}

% Network analysis is important in many fields
\hh{include at least one citation for each one of the examples:}
\par There are many kinds of networks, and networks are extensively studied across many disciplines.  Many sociologists study social networks, and many biologists study protein networks. As different as these and the many other disciplines that study networks are, they all need the ability to quickly and effectively visualize networks.
\hh{quickly and effectively are a bit vague as measures for why we need a geom implementation. We don't want to do any studies measuring time to result or define effectiveness. It might be better to give some concrete examples of packages doing network layouts and discuss the problematic that there is no standard way of bundling up the results, which makes working with them hard, and even harder to modify output to include additional information for visualizations. }

% Visualization of networks helps with analysis
Coloring the vertices or edges in a graph is a quick and easy way to visualize grouping and can help with pattern or cluster detection. The vertices in a network and the edges between them compose the structure of a network, and being able to discover patterns among them visually is a key part of network analysis. Viewing multiple layouts of the same network can also help reveal patterns or clusters that would not be discovered when only viewing one layout or analyzing only an adjacency matrix.

% Many network packages exist, but are not easy to use
Many \texttt{R} packages already exist for network analysis and visualization such as \texttt{igraph} by \citet{igraph}, \texttt{sna} by \citet{sna}, and \texttt{network} by \citet{network.jss, network} but we have found these packages to have unintuitive or burdensome \hh{you're shooting sharp -- it might be better to describe that our approach is more customizable and more intuitive to use} methods for customizing the colors, sizes, etc of the vertices and edges of the network. For instance, the \texttt{igraph} package allows for coloring vertices by groups but the user must assign the colors to each vertex individually as opposed to assigning color by a grouping factor variable.

% ggplot2 as an implementation framework
We found the current tools to be lacking in this ability, so we chose to fill this gap by adding network plotting capabilities to the popular and widely used \texttt{R} package \texttt{ggplot2}. Just to give an idea of the popularity and the wide-spread use of \texttt{ggplot2}, from January 1, 2015 to October 4, 2015, \texttt{ggplot2} was downloaded over 1.2 Million times, or approximately 4,342 downloads per day. It has also been downloaded in 215 countries at least once, and in 61 of those countries, including China, Israel, and Colombia, it has been downloaded over 1,000 times\footnote{\texttt{ggplot2} usage statistics taken from \url{http://cran-logs.rstudio.com/}.}. This is the user base we are aiming at by making network visualizations a part of \texttt{ggplot2}.

\hh{Besides the wide-spread use of ggplot2, its design based on the Grammar of Graphics \citep{wilkinson:1999} makes it relatively easy to extend. Examples include}
\fb{
%Perhaps we could stress that one of the benefits of learning the
%``grammar of graphics" is the opportunity to use that grammar in many
%different situations, e.g. with 
maps (see ggmap by \citet{ggmap}), e.g. with statistical models (see
ggfortify: https://github.com/sinhrks/ggfortify).
What the paper does
is to extend the benefits of learning the "gg" to network
visualization.

A lot of recent changes to ggplot2 are aimed at
facilitating the extension of ggplot2 in form of developing additional geoms, which is exactly
what the article illustrates.}

\hh{XXX there are quite a few other extensions that we should mention at this point: GGally \citep{ggally}, ggbio \citep{ggbio}, ... XXX need to add}

\hh{There are two main approaches to making use of the ggplot2 framework: (i) implement network visualizations using ggplot2, i.e. providing a wrapper for the user to visualize a network with ggplot2 elements, and (ii) implement networks as an internal layer of ggplot2.  For the second approach, two main implementations exist. We will discuss all of these  in this paper. }

\hh{XXX Provide roadmap for the rest of the paper. }



\section{Three implementations of network visualizations}

\subsection{ggnet2}
\subsection{geom\_net}
\subsection{geom\_node and geom\_edge}

\section{Examples}

In this section, we demonstrate the current capabilities of \texttt{ggnet2}, {geom\_net} and \code{ggnetwork} in a series of side by side examples.
For each of these examples, we are going to present the code necessary to produce the network, and discuss it in detail.

  \subsection{Blood Donation}
  In this directed network, there are eight vertices and 27 edges.  The vertices represent the eight different blood types in humans that are most important for donation: the ABO blood types A, B, AB, and O, combined with the RhD positive (+) and negative (-) types. The edges are directed: a person whose blood type is that of a \emph{from} vertex can to donate blood to a person whose blood type is that of a corresponding \emph{to} vertex. In the example below, loops are removed because loops exist on every vertex in this example, as blood between two people of matching ABO and RhD type can always be exchanged.

<<blood_common>>=
data(blood)
@

<<blood_ex_ggnet2, echo=TRUE, fig.cap= "Directed network of blood type donations in humans.", fig.width=6, fig.height=6>>=
ggnet2(network(blood$edges[, 1:2]), mode = "circle", size = 15,
       label = TRUE, arrow.size = 7.5, arrow.gap = 0.95, vjust = 0.5,
       node.color="darkred", label.color="grey80")
@

<<blood_ex_ggnet, echo=TRUE, fig.cap= "Directed network of blood type donations in humans.", fig.width=6, fig.height=6>>=
ggplot(data = blood$edges, aes(from_id = from, to_id = to)) +
  geom_net(colour = "darkred", layout = "circle", label = TRUE, size = 15,
           directed = TRUE, vjust = 0.5, labelcolour = "grey80",
           arrowsize = 1.5, linewidth = 0.75, arrowgap = 0.05) +
  theme_net()
@

<<blood_ex_ggnetwork, echo=TRUE, fig.cap= "Directed network of blood type donations in humans.", fig.width=6, fig.height=6>>=
ggplot(ggnetwork(network(blood$edges[, 1:2]), layout = "circle"),
       aes(x, y, xend = xend, yend = yend)) +
  geom_edges(arrow = arrow(length = unit(7.5, "pt"), type = "closed")) +
  geom_nodes(size = 15, color = "darkred") +
  geom_nodetext(aes(label = vertex.names), color = "grey80") +
  theme_blank()
@

This network is shown in figure \ref{fig.cap:blood_ex}.  Here, we have used the aesthetics \texttt{colour} and \texttt{size} set to identity values to change the size and color of all vertices. We have also used the \texttt{layout} and \texttt{label} arguments to change the default layout to a circle layout and to print the blood types, respectively. The circle layout places blood types of the same ABO type next to each other and spreads the vertices out far enough to distinguish between the various ``in" and ``out" types.  You can tell clearly from this plot that the O- type is the universal donor: it has an out-degree of seven and an in-degree of zero. Additionally, we can see that the AB+ type is the universal recepient, with an in-degree of seven and an out-degree of zero. Anyone looking at this plot can quickly determine which type(s) of blood they can receive and which type(s) can receive their blood.

\begin{figure}
\begin{subfigure}[t]{.32\textwidth}
\caption{ggnet2}
\includegraphics[width=\textwidth]{figure/blood_ex_ggnet2-1.pdf}
\end{subfigure}
\begin{subfigure}[t]{.32\textwidth}
\caption{geom\_net}
\includegraphics[width=\textwidth]{figure/blood_ex_ggnet-1.pdf}
\end{subfigure}
\begin{subfigure}[t]{.32\textwidth}
\caption{ggnetwork}
\includegraphics[width=\textwidth]{figure/blood_ex_ggnetwork-1.pdf}
\end{subfigure}
\caption{\label{fig.cap:blood_ex} Network of blood donation possibilities in humans by ABO and RhD blood types.}
\end{figure}
\afterpage{\clearpage}

\subsection{Email Network}

  This email network comes from the 2014 VAST Challenge \citep{emailnet}. It is a directed network of emails between company employees with 55 vertices and 9,063 edges. Each vertex is an employee of the company, and each edge is an email sent from one employee to one or more other employees. The arrow of the directed edge points to the recipient(s) of the email. The network contains two business weeks of emails across the entire company. In order to better visualize the structure of the communication network between employees, emails that were sent out to all employees are removed in the subsequent examples.


\begin{figure}
\begin{subfigure}[t]{\textwidth}
\caption{ggnet2}
<<email_ex_ggnet2, size="footnotesize", opts.label="codefig", echo=TRUE, out.width='\\textwidth'>>=
em.cet = as.character(
  email$nodes$CurrentEmploymentType)
names(em.cet) = email$nodes$label

edges <- subset(email$edges, nrecipients < 54)
em.net = edges[, c("From", "to") ]
em.net = network(em.net)
em.net %v% "curr_empl_type" = 
  em.cet[ network.vertex.names(em.net) ]

ggnet2(em.net, color = "curr_empl_type", 
       size = 4, palette = "Set1", 
       arrow.size = 10, arrow.gap = 0.95, 
       edge.alpha = 0.5, 
       color.legend = "Employment Type") +
  theme(legend.position="bottom")
@

\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{geom\_net}
<<email_ex, size="footnotesize", opts.label="codefig", echo=TRUE, out.width='\\textwidth'>>=
emailnet <- merge(
  subset(email$edges, nrecipients < 54), email$nodes, 
  by.x="From", by.y="label", all=TRUE)

ggplot(data = emailnet, 
       aes(from_id = From, to_id = to)) +
  geom_net(aes(colour= CurrentEmploymentType), 
           linewidth=0.5, ealpha=0.5, size=4, 
           directed=TRUE) +
  scale_colour_brewer("Employment Type", 
                      palette="Set1") + 
  theme_net() + 
  theme(legend.position="bottom")
@
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{ggnetwork}
<<email_ex_ggnetwork, size="footnotesize", opts.label="codefig", echo=TRUE, out.width='\\textwidth'>>=
ggplot(ggnetwork(em.net), 
       aes(x, y, xend = xend, yend = yend)) +
  geom_edges(
    alpha = 0.5, color = "grey50",
    arrow = arrow(length = unit(10, "pt"), 
                  type = "closed")) +
  geom_nodes(aes(color = curr_empl_type), 
             size = 4) +
  scale_color_brewer("Employment Type", 
                     palette = "Set1") +
  theme_blank() +
  theme(legend.position = "bottom")
@
\end{subfigure}

\caption{\label{fig.cap:email_ex} Email network within a company over a two week period.}
\end{figure}
\afterpage{\clearpage}

This network is plotted in figure \ref{fig.cap:email_ex}.  There are six distinct clusters in this network which almost perfectly correspond to the six different types of employee in this company: administration, engineering, executive, facilities, information technology, and security. %Unfortunately, there is currently no legend to associate color with employment type. This will be remedied in the final version of our geometry.
Additionally, the edges between employees in the same cluster are  darker than edges between employees in different clusters. This is due to the value of the \texttt{ealpha} aesthetic: more emails between two employees lead to darker edges.  The value is set to 0.1 in this example, so that ten or more emails between two employees result in a completely opaque edge. This pattern of heavy communication between employees of the same type is fairly unsurprising. 


\section{Summary}

This file is only a basic article template. For full details of \emph{The R Journal} style and information on how to prepare your article for submission, see the \href{http://journal.r-project.org/share/author-guide.pdf}{Instructions for Authors}.

\bibliography{tyner-briatte-hofmann}

\address{Samantha Tyner\\
  Department of Statistics and Statistical Laboratory\\
  Iowa State University\\
  United States\\}
\email{sctyner@mail.iastate.edu}

\address{Fran\c{c}ois Briatte\\
  Affiliation\\
  Address\\
  Country\\}
\email{francois.briatte@sciencespo.fr}

\address{Heike Hofmann\\
  Department of Statistics and Statistical Laboratory\\
  Iowa State University\\
  United States\\}
\email{hofmann@mail.iastate.edu}
