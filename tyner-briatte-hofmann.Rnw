% !TeX root = RJwrapper.tex
\title{Network Visualizations in \pkg{ggplot2}}
\author{by Sam Tyner, Fran\c{c}ois Briatte and  Heike Hofmann}

\maketitle
\sct{
\abstract{
This paper explores three new functionalities built on the \pkg{ggplot2} framework: \texttt{geom\_net}, \texttt{ggnet2}, and \texttt{ggnetwork}.  We will show that together, these additions contribute significantly to the visualization of networks.
}}

\hh{TODO list:

\begin{enumerate}
\item the code in some of the examples goes beyond the page margin - we need to fix that.
\item a couple of the examples don't have all three solutions yet.
\item for the protein example it would probably be enough to just show the code for all implementations, but only one of the resulting donut rings.
\item there's still some inconsistencies with the formatting. Everything that is working code should be in the framework \code{working code}, everything that is just a piece of text that should not be confused with regular text needs to go into the \samp{not regular text} environment.
\end{enumerate}}


<<setup_knitr, echo=FALSE>>=
library(knitr)
opts_chunk$set(
  tidy = FALSE, echo = FALSE, cache = FALSE, eval = TRUE,
  message = FALSE, warning = FALSE, highlight = FALSE, background = '#FFFFFF',
  fig.height = 8, fig.width = 8, fig.align = 'center', fig.show = 'hide'
)

## From Josh O'Brien's stackoverflow answer:
## http://stackoverflow.com/questions/11030898/knitr-how-to-align-code-and-plot-side-by-side
## These two settings control text width in codefig vs. usual code blocks
partWidth <- 35
fullWidth <- 60
options(width = fullWidth)

##  (1) CHUNK HOOK FUNCTION
##   First, to set R's textual output width on a per-chunk basis, we
## need to define a hook function which temporarily resets global R's
## option() settings, just for the current chunk
knit_hooks$set(r.opts = local({
    ropts <- NA
    function(before, options, envir) {
        if (before) {
            ropts <<- options(options$r.opts)
        } else {
            options(ropts)
        }
    }
}))

## (2) OUTPUT HOOK FUNCTION

##   Define a custom output hook function. This function processes _all_
## evaluated chunks, but will return the same output as the usual one,
## UNLESS a 'codefig' argument appeared in the chunk's header.  In that
## case, wrap the usual textual output in LaTeX code placing it in a
## narrower adjustbox environment and setting the graphics that it
## produced in another box beside it.

defaultChunkHook <- environment(knit_hooks[["get"]])$defaults$chunk

codefigChunkHook <- function (x, options) {
        main <-  defaultChunkHook(x, options)
        before <-
            "\\vspace{1em}\n
             \\begin{adjustbox}{valign=t}\n
             \\begin{minipage}{.49\\textwidth}\n"
        after <-
            paste("\\vspace{1em}\n
                   \\end{minipage}\n
                  \\begin{minipage}{.49\\textwidth}\n",
                   paste0("\\includegraphics[width=\\textwidth]{figure/",
                          options[["label"]], "-1.pdf}\n
                          \\end{minipage}\n
                          \\end{adjustbox}"),
                          sep="\n")
    ## Was a codefig option supplied in chunk header?
    ## If so, wrap code block and graphical output with needed LaTeX code.
    if (!is.null(options$codefig)) {
      return(sprintf("%s %s %s", before, main, after))
    } else {
      return(main)
    }
}

knit_hooks[["set"]](chunk = codefigChunkHook)


## (3) TEMPLATE
##   codefig=TRUE is just one of several options needed for the
## side-by-side code block and a figure to come out right. Rather
## than typing out each of them in every single chunk header, we
## define a _template_ which bundles them all together. Then we can
## set all of those options simply by typing opts.label="codefig".

opts_template[["set"]](
codefig = list(codefig=TRUE, fig.show = "hide",
               r.opts = list(width = partWidth),
               tidy.opts = list(width.cutoff = partWidth)))
@

<<load_packages, results='hide'>>=
## ggplot2
library(ggplot2) # needs to be version â‰¥ 1.0.1.9003

## geom_net
if (!require(ggnet, quietly = TRUE)) {
  devtools::install_github("sctyner/ggnet")
}
library(ggnet)
## TODO: I would recommend renaming the repo to e.g. geom-net for clarity (Fr.)

## ggnetwork
if (!require(ggnetwork, quietly = TRUE)) {
  devtools::install_github("briatte/ggnetwork")
}
library(ggnetwork)

## ggnet2
source("https://raw.githubusercontent.com/briatte/ggnet/master/ggnet2.R")
## TODO: should be a lightweight package... any chance geom_net could come
## in a package called geomnet or something like that, so that I can use
## the name ggnet to package ggnet and ggnet2?
@

% introductory section

% Network analysis is important in many fields
\fb{XXX How about turning the introduction upside down, starting with the fact that many R users have also taken the time to learn the grammar of graphics on top of the R language, and that the R community might therefore benefit from making additional data types amenable to manipulation through that grammar? Once the rationale is clear, move on to the application, which is networks for us.}
\hh{I'm not so sure that many R users actually even know what the grammar of graphics is, but I would agree that lots of people use ggplot2. Generally the first thing mentioned in a paper takes the central position -- for this paper, that's network visualizations. ggplot2 is the means we use, but that doesn't mean it should get spot number one. }
\sct{XXX }


\hh{XXX include at least one citation for each one of the examples:}
\par There are many kinds of networks, and networks are extensively studied across many disciplines.  Many sociologists study social networks, and many biologists study protein networks. As different as these and the many other disciplines that study networks are, they all \hh{benefit from good network visualizations.}
%need the ability to quickly and effectively visualize networks.
%\hh{quickly and effectively are a bit vague as measures for why we need a geom implementation. We don't want to do any studies measuring time to result or define effectiveness. It might be better to give some concrete examples of packages doing network layouts and discuss the problematic that there is no standard way of bundling up the results, which makes working with them hard, and even harder to modify output to include additional information for visualizations. }

% Visualization of networks helps with analysis
Coloring the vertices or edges in a graph is a quick way to visualize grouping and can help with pattern or cluster detection. The vertices in a network and the edges between them compose the structure of a network, and being able to discover patterns among them visually is a key part of network analysis. Viewing multiple layouts of the same network can also help reveal patterns or clusters that would not be discovered when only viewing one layout or analyzing only an adjacency matrix.

% Many network packages exist, but are not easy to use
Many R packages already exist for network analysis and visualization such as \pkg{igraph} by \citet{igraph}, \pkg{sna} by \citet{sna}, and \pkg{network} by \citet{network.jss, network}.
\hh{Unfortunately, there is not a standard format for network results, which requires detailed knowledge from users of each one of these packages in order to make meaningful changes to the network visualization, such as}
%but we have found these packages to have unintuitive or burdensome \hh{ XXX you're shooting sharp -- it might be better to describe that our approach is more customizable and more intuitive to use} methods for
customizing the colors, sizes, etc. of the vertices and edges of the network. For instance, the \pkg{igraph} package allows for coloring vertices by groups but the user has to assign the colors to each vertex individually as opposed to assigning color by a grouping factor variable.

% ggplot2 as an implementation framework
%We found the current tools to be lacking in this ability, so
We chose to fill this gap by adding network plotting capabilities to the popular and widely used R package \pkg{ggplot2}. Just to give an idea of the popularity and %the wide-spread use
the large user base of \pkg{ggplot2}, from January 1, 2015 to October 10, 2015, \pkg{ggplot2} was downloaded over 1.2 Million times \sct{from CRAN: over 4,000 downloads per day.} It has also been downloaded in 215 countries at least once, and in 21 of those countries, including China, Israel, and Colombia, it has been downloaded over 10,000 times\footnote{\pkg{ggplot2} usage statistics taken from \url{http://cran-logs.rstudio.com/}.}. This is the audience we are aiming at by making network visualizations a part of \pkg{ggplot2}.

In addition to the wide-spread use of \pkg{ggplot2}, its design based on the Grammar of Graphics \citep{wilkinson:1999} makes it relatively easy to extend. Many extensions already exist:
% \fb{Perhaps we could stress that one of the benefits of learning the
%``grammar of graphics" is the opportunity to use that grammar in many
%different situations, e.g. with}
\sct{mapping via the \pkg{ggmap} package by \citet{ggmap}, visualization of statistical models via the \pkg{ggfortify} package by \citet{ggfortify}, many helper functions in the \pkg{GGally} by \citep{ggally}, and \textit{Bioconductor} plotting via the \pkg{ggbio} by \citep{ggbio}, to name a few. Just as these examples have increased the utility of \pkg{ggplot2}, our additions aim to extend the benefits of the grammar of graphics to network visualization.}

\sct{The most recent changes to \pkg{ggplot2} are aimed at
facilitating extension of \pkg{ggplot2} in form of additional \texttt{geom} functions, which is exactly what we have done here.}

\sct{There are two main approaches to making use of the \pkg{ggplot2} framework: (i) implement network visualizations using \pkg{ggplot2}, by providing a wrapper for the user to visualize a network with \pkg{ggplot2} elements, and (ii) implement network visualizations as internal layers in \pkg{ggplot2}.  For the second approach, two main implementations exist: one which implements the structures of a network, such as nodes, edges, and node labels as independent geoms and antoher which wraps all of these structures into a single geom. We will discuss all of these approaches in this paper. }

% getting into more of the nitty-gritty details
At its core, a network is simply a set of points connected in pairs by a set of lines \citep{newman}.  Here, we refer to the lines as edges and the points as vertices, although these are also called nodes.  These two seemingly simple sets of graphical objects, points and segments, are used to encode a huge variety and quantity of information across many fields of study. For instance, networks of scientific collaboration, a food web of marine animals, and American college football games are all covered in a paper on community detection in networks by \citet{football}.  \citet{networkfailures} examine node failure in interdependent networks like power grids.  Social networks, such as links between actors found on \url{www.imdb.com}, and neural networks, like the completely mapped neural network of the \textit{C. elegans} worm are also etensively studied \citep{smallworld}.  Networks vary widely in scope and complexity: the smallest network is simply an edge between two vertices, while one of the most commonly used and most complex networks, the world wide web, has billions of vertices (webpages) and billions of edges (hyperlinks) connecting them.  The edges in a network can  be directed or undirected: directed edges represent information travelling from one vertex to another, and switching the direction would change the structure of the network. The world wide web is an example of a directed network because one webpage may link to another, but not necessarily the other way around. Undirected edges are simply connections between vertices. In co-authorship networks nodes are authors connected by an edge, if they author an academic publication together. Co-authorship networks are examples of undirected networks because if two people author a paper together, it creates a connection between them that is bidirectional.

\par A social network is a network that everyone is a part of in one way or another.  We do not necessarily refer here to social media like Facebook or LinkedIn, but rather to the connections we form with other people. To demonstrate the functionality of our geometry for plotting networks, we have chosen an example of a social network from the popular television show Mad Men.  This network, compiled by \citet{madmen}, is made up of 52 vertices and 87 edges. Each vertex represents a character on the show, and there is an edge between every two characters who have had a romantic relationship.

Figure~\ref{fig.cap:madmen} shows this network.
In the plot, we can see one central character who has many more relationships than any other character. This vertex represents the main character of the show, Don Draper, who is quite the ``ladies' man."  This example shows just how ubiquitous networks are. %% if we have to say that something is fun, it no longer is ...

\begin{figure}[hbtp]
\centering
<<madmen_geom_net, out.width='\\textwidth', fig.width=9, fig.height=9.5>>=
# data step: merge edges and nodes
MMnet <- merge(madmen$edges, madmen$vertices,
               by.x = "Name1", by.y = "label", all = TRUE)
# create plot
ggplot(data = MMnet, aes(from_id = Name1, to_id = Name2)) +
  geom_net(aes(colour = Gender), size = 4, label = TRUE,
           vjust = -0.6, ecolour = "grey50") +
  scale_colour_manual(values = c("#FF69B4", "#0099ff")) +
  xlim(c(-0.05, 1.05)) +
  theme_net() +
  theme(legend.position = "bottom")
@
\includegraphics[width=\textwidth]{figure/madmen_geom_net-1.pdf}
\caption{\label{fig.cap:madmen} Graph of the characters in the show Mad Men who are linked by a romantic relationship. }
\end{figure}
\afterpage{\clearpage}


\hh{In the next section we will discuss the motivation and ideas behind each one of the three approaches. This will be followed up by an extensive discussion of network examples, in which we will provide side by side code and examples of each implementation.}

\section{Three implementations of network visualizations}

\subsection{ggnet2}
\fb{

The \samp{ggnet2} function is an improved version of the \samp{ggnet} function, which has been part of the \pkg{GGally} package since 20xx \citep{ggally}. Both functions can be downloaded as a small R package from \url{https://github.com/briatte/ggnet}, and a detailed introduction to the \samp{ggnet2} function is available from within the package as a vignette.%
  \footnote{The vignette can be viewed online at \url{https://briatte.github.io/ggnet/}.}

The \samp{ggnet2} function is the most 'encapsulated' of the three implementations presented in this paper, insofar as it tries to offer as much network visualization functionalities as possible in a single function call. While the resulting object is a \pkg{ggplot2} object that can be further style with \pkg{ggplot2} scales and themes, the syntax of the \samp{ggnet2} function is idiosyncratic, with the aesthetics of the nodes being controlled by arguments such as \samp{node.alpha} or \samp{node.color}, and those of the edges being controlled by similar arguments starting with \samp{edge}. As a consequence, while \samp{ggnet2} applies the grammar of graphics to network objects, the function itself still works very much like the plotting functions of the \pkg{igraph} and \pkg{network} packages, i.e.\ through a long series of arguments that try to control every possible aspect of how the network should be represented.

The \samp{ggnet2} function takes a single network object as input. That initial object might be an object of class \samp{network} (at the exception of hypergraphs or multiplex graphs), or any data structure coercible to an object of that class, such as an incidence matrix, an adjacency matrix or an edge list, and if the \pkg{intergraph} package is installed \citep{intergraph}, the function will also accept network objects of class \samp{igraph}. The function then applies every necessary step to convert that network object for use with \pkg{ggplot2}, which results in the creation of two data frames, one for edges and another one for nodes, that are then passed to \pkg{ggplot2} as arguments to segment and point geometries respectively. The long list of arguments that can be passed to the function offer some control over the aesthetics of these geometries, including through the addition of edge and/or node labels.

In addition to arguments that allow to map particular values (or the values of network attributes) to the aesthetics of the plot, the \samp{ggnet2} function also supports a few network-specific options, such as the possibility to size the nodes in function of their degree, or the possibility to use the primary and secondary modes of a bipartite network as an aesthetic mapping for the nodes. As a result, the function is the sum of two different kinds of processes, the first of which translates a network object into a data frame suitable for plotting with \pkg{ggplot2}, and the second of which applies some network-related operations on that data frame (such as coloring the edges in function of the color of the nodes that they connect).

% \hh{XXX Francois, could you go into more detail here?
% node aesthetics, edge aesthetics, what kind of networks work as input ... is it restricted to output from the network package? e.g. the expectation from the user is really to be able to deal with a network call.
% How you work with the networks to get additional information in is also interesting - you could also discuss the edge and node operators that you use.
% The output that is produced is a ggplot2 object, which means that additional ggplot2 layers can be added on top, and themes or other scaling methods can be used.
% I wouldn't really call the approach `hacky' though - no matter what the function looks like on the inside, on the outside it is a pretty straightforward approach: network in, ggplot2 visualization object out. In that sense it is an approach very much aligned with other approaches in the GGally package.
% }

\fb{Is that summary enough, or should I delve into the parameters and aesthetics? If I do, this is going to be a long paper, there are tons of arguments.}

\subsection{ggnet: geom\_net}
\subsubsection{Data Structure}
\hh{The idea behind the network implementation using a single layer for the network, is similar to the implementation of other, native \pkg{ggplot2} geoms, such as \samp{geom\_smooth}, for example, where the user does not need to know about any of the internals of the loess function, or, here, the layout algorithm, but only specifies the essential elements necessary for calculating a layout. If, on the other hand, the user is familiar with network analysis, the whole apparatus of layout methods provided by the \pkg{network} package is available to her through the parameters \samp{layout} and \samp{layout.par}. }
%
\hh{Network analysis is usally working with two sources of information: one data set consisting of a description of the `players', represented as the nodes or vertices in the network, and another data set detailing the relationship between the players, the edge dataset.
In order for this geometry to work, these two data sets need to be combined into a single dataset. For this, we are using the convention that all of the node information is merged into the edge data set using the `from' as the reference column. Generally, there will be some vertices that are sinks in the network, ie.\ they only show up in the `to' column. We can easily accommodate for these nodes by adding artificial edges in the data set, that have missing information for the `to' column.
Fortunately, R provides functioniality that allows for an easy way of producing the required result: both \samp{merge} and \samp{join} can be used. In \samp{merge} the parameter \samp{all} needs to be set to \samp{TRUE}, in \samp{join}, the parameter setting has to be \samp{type='full'}, and \samp{all=TRUE}.
}

\hh{The formal requirement of  \samp{stat\_net} are two columns, called \samp{from\_id} and \samp{to\_id}. During this routine, columns \samp{x, y} and \samp{xend, yend} are calculated and used as a required input for \samp{geom\_net}.}

Other variables may also be included for each edge, such as the edge weight or grouping variable.


\subsubsection{Parameters and Aesthetics}
\hh{Parameters that are currently implemented are:
\begin{itemize}
\item {\bf layout:}
the \samp{layout} parameter takes a character value corresponding to the possible layouts in the \pkg{sna} package that are available within the \texttt{gplot.layout.*()} family of functions.  The default layout is the Kamada-Kawai layout.  This is a force-directed layout for undirected networks \citep{kamadakawai}. There are, however, many other layouts possible (see \code{?sna::gplot.layout}).
Corresponding to each layout, the parameter  \samp{layout.par} consists of a list of the parameters for the chosen layout. \samp{fiteach} is a Boolean, specifying, whether each panel's data should be fit separately (default) or whether the same layout should be used for all of the panels.
\item {\bf nodes/vertices:} any of \pkg{ggplot2}'s aesthetics relating to points, i.e.\ aesthetics such as colour, size, shape, and alpha are available and used for specifying the appearance of nodes in the network.
%
\item {\bf edges:} for edges we distinguish between two different sets of aesthetics: aesthetics that only relate to line attributes, such as  linewidth, linetype, and stroke.  These can be used in the regular way.  Additionally, node aesthetics such as alpha or colour are used for vertices unless separately spcified by using the parameters \samp{ecolour} or \samp{ealpha}, which are only applied to the edges.
The parameter \samp{curvature} is set to zero by default, but if specified, leads to curved edges using the newly implemented \pkg{ggplot2} geom \samp{geom\_curve} instead of the regular \samp{geom\_segment}.
Note that the edge specific aesthetics, that overwrite node aesthetics, are currently considered as `as.is' values, i.e.\ they do not get a legend and are not scaled within the ggplot2 framework. This is done, to avoid any clashes between scales.
%
\item {\bf arrow:} whenever the parameter \samp{directed} is set from its default state to \samp{TRUE}, arrows are drawn from the `from' to the `to' node, with tips pointing towards the `to' node.  By default, arrows have an absolute size of 10 points. The parameter \samp{arrowsize} consists of a positive numeric value that is used as a multiple of the original arrow size, i.e.\ \samp{arrowsize = 2} shows arrow tips at twice their original size. In order to avoid overplotting of the arrow tips by the nodes, the parameter \samp{arrowgap} can be used. \samp{arrowgap} specifies a proportion (i.e. a value between 0 and 1) by which the edge should be shrunk, it defaults to 0.05. A value of 0.5 will result in edges drawn only half way from the `from' node to the `to' node.
\item {\bf labels:}  \samp{label} can be used as either a Boolean parameter and as a data variable, in which case it is assumed that the associated variable consists of the character strings to be used for labelling the nodes. Again, if \samp{colour} is specified for the nodes, the same values are used for the labels, unless \samp{ labelcolour} is specified. Other parameter values, such as \samp{vjust} and \samp{hjust} help in adjusting labels relative to the nodes. The parameters work in the same fashion as in native \pkg{ggplot2} geoms.
\end{itemize}
}

\subsection{ggnetwork: geom\_node and geom\_edge}

\fb{\samp{ggnetwork} is
a small package that mimicks the behaviour of \samp{geom\_net} by defining
several geoms to achieve similar results:

\url{https://briatte.github.io/ggnetwork/}

The approach of \samp{ggnetwork} is to 'alias' some of the native geometries (or 'geoms') of the \pkg{ggplot2} package, an 'aliased' geom being a variant of another geom that is already present in the package. The \pkg{ggplot2} package contains several examples of aliased geoms, such as \samp{geom\_histogram}, which is a variant of \samp{geom\_bar} (see \citealt[p.~67, Table~4.6]{ggplot}).

Following that logic, \samp{ggnetwork} adds four geometries to \pkg{ggplot2}:

\begin{itemize}
  \item \samp{geom\_nodes}, an alias to \samp{geom\_point};
  \item \samp{geom\_edges}, an alias to either \samp{geom\_segment} or \samp{geom_curve};
  \item \samp{geom\_nodetext}, an alias to \samp{geom\_text}; and
  \item \samp{geom\_edgetext}, an alias to \samp{geom\_label}.
\end{itemize}

The four geoms are used to plot nodes, edges, node labels and edge labels respectively. Two of the geoms that they alias, \samp{geom_curve} and \samp{geom\_label}, are part of the new geometries introduced in \pkg{ggplot2} version 1.1.0.\footnote{See \url{https://github.com/hadley/ggplot2/blob/master/NEWS.md}.}

Data-wise, \samp{ggnetwork} uses the same trick as \samp{geom\_net}: left-join
the edge list and the nodal attributes, add self-loops to make sure
that every node is plotted even if their degree is zero, and pass that
data frame to \pkg{ggplot2}.
}

\hh{For the data-wise ... paragraph, are you talking about the package ggnetwork or the function ggnetwork? I was under the impression, that the ggnetwork package requires a data set with x, y, xend, yend, and, if labels are supposed to be shown, those, too. The function ggnetwork looks to me like a wrapper for network that produces a data set like just described from a network object. But that means that all of the information on colors or other aesthetics need to be part of that network object, which means that you are again, using the same tools as for ggnet2, i.e. this node and the edge operator. }


\section{Examples}

In this section, we demonstrate the current capabilities of \samp{ggnet2}, {geom\_net} and \samp{ggnetwork} in a series of side by side examples.
For each of these examples, we are going to present the code necessary to produce the network, and discuss it in detail.

\subsection{Blood Donation}
In this directed network, there are eight vertices and 27 edges.  The vertices represent the eight different blood types in humans that are most important for donation: the ABO blood types A, B, AB, and O, combined with the RhD positive (+) and negative (-) types. The edges are directed: a person whose blood type is that of a \emph{from} vertex can to donate blood to a person whose blood type is that of a corresponding \emph{to} vertex. In the example below, loops are removed because loops exist on every vertex in this example, as blood between two people of matching ABO and RhD type can always be exchanged.

<<blood_common>>=
data(blood)
@

<<blood_ggnet2, echo=TRUE, fig.width=6, fig.height=6>>=
# plot with ggnet2
ggnet2(network(blood$edges[, 1:2]), mode = "circle", size = 15,
       label = TRUE, arrow.size = 10, arrow.gap = 0.05, vjust = 0.5,
       node.color = "darkred", label.color = "grey80")
@

<<blood_geom_net, echo=TRUE, fig.width=6, fig.height=6>>=
# plot with geom_net
ggplot(data = blood$edges, aes(from_id = from, to_id = to)) +
  geom_net(colour = "darkred", layout = "circle", label = TRUE, size = 15,
           directed = TRUE, vjust = 0.5, labelcolour = "grey80",
           arrowsize = 1.5, linewidth = 0.5, arrowgap = 0.05) +
  theme_net()
@

<<blood_ggnetwork, echo=TRUE, fig.width=6, fig.height=6>>=
# plot with ggnetwork
ggplot(ggnetwork(network(blood$edges[, 1:2]), layout = "circle"),
       aes(x, y, xend = xend, yend = yend)) +
  geom_edges(color = "grey50",
             arrow = arrow(length = unit(10, "pt"), type = "closed")) +
  geom_nodes(size = 15, color = "darkred") +
  geom_nodetext(aes(label = vertex.names), color = "grey80") +
  theme_blank()
@

This network is shown in figure \ref{fig.cap:blood}.  Here, we have used the aesthetics \samp{colour} and \samp{size} set to identity values to change the size and color of all vertices. We have also used the \samp{layout} and \samp{label} arguments to change the default layout to a circle layout and to print the blood types, respectively. The circle layout places blood types of the same ABO type next to each other and spreads the vertices out far enough to distinguish between the various ``in" and ``out" types.  You can tell clearly from this plot that the O- type is the universal donor: it has an out-degree of seven and an in-degree of zero. Additionally, we can see that the AB+ type is the universal recepient, with an in-degree of seven and an out-degree of zero. Anyone looking at this plot can quickly determine which type(s) of blood they can receive and which type(s) can receive their blood.

\begin{figure}
\begin{subfigure}[t]{.32\textwidth}
\caption{ggnet2}
\includegraphics[width=\textwidth]{figure/blood_ggnet2-1.pdf}
\end{subfigure}
\begin{subfigure}[t]{.32\textwidth}
\caption{geom\_net}
\includegraphics[width=\textwidth]{figure/blood_geom_net-1.pdf}
\end{subfigure}
\begin{subfigure}[t]{.32\textwidth}
\caption{ggnetwork}
\includegraphics[width=\textwidth]{figure/blood_ggnetwork-1.pdf}
\end{subfigure}
\caption{\label{fig.cap:blood} Network of blood donation possibilities in humans by ABO and RhD blood types.}
\end{figure}
\afterpage{\clearpage}

\subsection{Email Network}

This email network comes from the 2014 VAST Challenge \citep{emailnet}. It is a directed network of emails between company employees with 55 vertices and 9,063 edges. Each vertex is an employee of the company, and each edge is an email sent from one employee to one or more other employees. The arrow of the directed edge points to the recipient(s) of the email. The network contains two business weeks of emails across the entire company. In order to better visualize the structure of the communication network between employees, emails that were sent out to all employees are removed in the subsequent examples.

\begin{figure}
\begin{subfigure}[t]{\textwidth}
\caption{ggnet2}
<<email_ggnet2, size="footnotesize", opts.label="codefig", echo=TRUE, out.width='\\textwidth'>>=
em.cet <- as.character(
  email$nodes$CurrentEmploymentType)
names(em.cet) = email$nodes$label

edges <- subset(email$edges, nrecipients < 54)
em.net <- edges[, c("From", "to") ]
em.net <- network(em.net)
em.net %v% "curr_empl_type" <-
  em.cet[ network.vertex.names(em.net) ]

ggnet2(em.net, color = "curr_empl_type",
       size = 4, palette = "Set1",
       arrow.size = 5, arrow.gap = 0.02,
       edge.alpha = 0.5,
       color.legend = "Employment Type") +
  theme(legend.position = "bottom")
@

\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{geom\_net}
<<email_geom_net, size="footnotesize", opts.label="codefig", echo=TRUE, out.width='\\textwidth'>>=
emailnet <- merge(
  subset(email$edges, nrecipients < 54), email$nodes,
  by.x="From", by.y="label", all=TRUE)

ggplot(data = emailnet,
       aes(from_id = From, to_id = to)) +
  geom_net(aes(colour= CurrentEmploymentType),
           linewidth=0.5, ealpha=0.5, size=4,
           directed=TRUE) +
  scale_colour_brewer("Employment Type",
                      palette="Set1") +
  theme_net() +
  theme(legend.position="bottom")
@
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{ggnetwork}
<<email_ggnetwork, size="footnotesize", opts.label="codefig", echo=TRUE, out.width='\\textwidth'>>=
ggplot(ggnetwork(em.net, arrow.gap = 0.02),
       aes(x, y, xend = xend, yend = yend)) +
  geom_edges(
    alpha = 0.5, color = "grey50",
    arrow = arrow(length = unit(5, "pt"),
                  type = "closed")) +
  geom_nodes(aes(color = curr_empl_type),
             size = 4) +
  scale_color_brewer("Employment Type",
                     palette = "Set1") +
  theme_blank() +
  theme(legend.position = "bottom")
@
\end{subfigure}

\caption{\label{fig.cap:email} Email network within a company over a two week period.}
\end{figure}
\afterpage{\clearpage}

This network is plotted in figure \ref{fig.cap:email}.  There are six distinct clusters in this network which almost perfectly correspond to the six different types of employee in this company: administration, engineering, executive, facilities, information technology, and security.

Additionally, the edges between employees in the same cluster are  darker than edges between employees in different clusters. This is due to the value of the \samp{ealpha} aesthetic: more emails between two employees lead to darker edges.  The value is set to 0.1 in this example, so that ten or more emails between two employees result in a completely opaque edge. This pattern of heavy communication between employees of the same type is fairly unsurprising.

To make this visualization more interesting and informative, we facet the network by day: each panel in Figure~\ref{fig:email_facet} shows the different email networks associated with each day of the week.

<<email_facet_ggnet2, fig.height=4, fig.width=8, fig.cap = 'All emails within a company over a two week period facetted by day of the month.',echo=TRUE, out.width='\\textwidth'>>=
em.day <- subset(email$edges, nrecipients < 54)[, c("From", "to", "day") ]
em.day <- lapply(unique(em.day$day), function(x) subset(em.day, day == x)[, 1:2 ])
em.day <- lapply(em.day, network, directed = TRUE)
for (i in 1:length(em.day)) {
  em.day[[ i ]] %v% "curr_empl_type" <- em.cet[ network.vertex.names(em.day[[ i ]]) ]
  em.day[[ i ]] %n% "day" <- unique(email$edges$day)[ i ]
}

g <- list(length(em.day))
for (i in 1:length(em.day)) {
  g[[ i ]] <- ggnet2(em.day[[ i ]], size = 2, color = "curr_empl_type",
                     palette = "Set1", arrow.size = 0, arrow.gap = 0.01,
                     edge.alpha = 0.1, legend.position = "none") +
    ggtitle(paste("Day", em.day[[ i ]] %n% "day")) +
    theme(panel.border = element_rect(color = "grey50", fill = NA))
}
gridExtra::grid.arrange(grobs = g, nrow = 2)
@

<<email_facet_geom_net, fig.height=5, fig.width=8, echo=TRUE, out.width='\\textwidth'>>=
# source for geom_net
# data step: making sure that there is one entry for each person on each day
employee <- data.frame(expand.grid(label = unique(email$nodes$label),
                                   day = unique(email$edges$day)))
employee <- merge(employee, email$nodes, by = "label")
emailnet <- merge(subset(email$edges, nrecipients < 54), employee,
                  by.x = c("From", "day"), by.y = c("label", "day"), all = TRUE)

# creating the plot
ggplot(data = emailnet, aes(from_id = From, to_id = to)) +
  geom_net(aes(colour = CurrentEmploymentType), fiteach = TRUE, linewidth = 0.5,
           ealpha = 0.5, size = 2, directed = TRUE, arrowsize = .5) +
  scale_colour_brewer(palette = "Set1") +
  theme_net() +
  facet_wrap(~ day, nrow = 2, labeller = "label_both") +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, colour = "grey60"))
@

%% NOTE: the code below requires version >= 0.1.7 of ggnetwork
%% devtools::install_github("briatte/ggnetwork")

The faceting technique employed by \samp{ggnetwork} is close to that of \samp{geom\_net}, except it happens internally to the function. Passing an edge attribute to the \samp{by} argument will cause \samp{ggnetwork} to return a data frame in which the nodes have been 'panelized' according to that attribute. In that data frame, each node appears as many times as there are unique values to the edge attribute passed to \samp{by}, which will cause the node to appear in all facets of the plot. Furthermore, and unlike \samp{geom\_net}, he same set of coordinates is assigned to all instances (i.e. to all rows) of the same node, which causes the position of each node to be identical in all facets of the plot.

<<email_facet_ggnetwork, fig.height=4, fig.width=8, fig.cap = 'All emails within a company over a two week period facetted by day of the month.',echo=TRUE, out.width='\\textwidth'>>=
# plot with ggnetwork

# create the network
edges <- subset(email$edges, nrecipients < 54)
edges <- edges[, c("From", "to", "day") ]
em.net <- network(edges[, 1:2])
set.edge.attribute(em.net, "day", edges[, 3])
em.net %v% "curr_empl_type" <-
  em.cet[ network.vertex.names(em.net) ]

# create the plot
ggplot(ggnetwork(em.net, arrow.gap = 0.02, by = "day"),
       aes(x, y, xend = xend, yend = yend)) +
  geom_edges(
    alpha = 0.5, color = "grey50",
    arrow = arrow(length = unit(5, "pt"),
                  type = "closed")) +
  geom_nodes(aes(color = curr_empl_type),
             size = 4) +
  scale_color_brewer("Employment Type",
                     palette = "Set1") +
  facet_wrap(~ day, nrow = 2, labeller = "label_both") +
  theme_blank() +
  theme(legend.position = "bottom")
@

\begin{figure}
\begin{subfigure}[t]{\textwidth}
\caption{ggnet2}
\includegraphics[width=\textwidth]{figure/email_facet_ggnet2-1.pdf}
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{geom\_net}
\includegraphics[width=\textwidth]{figure/email_facet_geom_net-1.pdf}
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{ggnetwork}
\includegraphics[width=\textwidth]{figure/email_facet_ggnetwork-1.pdf}
\end{subfigure}

\caption{\label{fig:email_facet} The same email network as in figure~\ref{fig.cap:email} facetted by day of the week.}
\end{figure}
%
This plot is shown in Figure~\ref{fig:email_facet}. With the facetting, we can see that there are several days where one or more departments do not communicate with any of the other departments. There are only two days, 13 and 15, without any isolated department communications. Facetting is one of the major benefits of creating a geometry for networks in \pkg{ggplot2}.  Facetting quickly separates dense networks into separate subnetworks for easy visual comparison and  analyses.

\subsection{\pkg{ggplot2} Theme Elements}
This example comes from the \samp{theme()} help page in the \pkg{ggplot2} documentation \citep{ggplot}.  It is a directed network which shows the structure of the inheritance of theme options in the construction of a \pkg{ggplot2} plot. There are 53 vertices and 36 edges in this network. Each vertex represents one possible theme option. There is an arrow from one theme option to another if the element represented by the \emph{to} vertex inherits its values from the \emph{from} vertex.  For example, the \samp{axis.ticks.x} option inherits its value from the \samp{axis.ticks} value, which in turn inherits its value from the \samp{line} option.  Thus, setting the \samp{line} option to a value such as \samp{element\_blank()} sets the entire inheritance tree to \samp{element\_blank()}, and no lines appear anywhere on the plot background. Finally, we note that the vertices with no edges were incorporated into the plot by adding their labels to the edges data frame in both the  \samp{from\_id} and \samp{to\_id} columns before passing the edges data frame to \samp{ggplot}.

\begin{figure}
\begin{subfigure}[t]{\textwidth}
\caption{ggnet2}
<<theme_ggnet2, size="footnotesize", opts.label="codefig", echo=TRUE>>=
te.net <- network(theme_elements$edges)
te.net %v% "size" <-
  sqrt(10 * (sna::degree(te.net) + 1))

ggnet2(te.net, label = TRUE, color = "white",
       label.size = "size", layout.exp = 0.15)
@
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{geom\_net}
<<theme_geom_net, size="footnotesize", opts.label="codefig", echo=TRUE>>=
# data step: merge nodes and edges and
# introduce a degree-out variable
library(dplyr)
TEnet <- merge(
  theme_elements$edges,
  theme_elements$vertices,
  by.x = "parent", by.y = "name", all = TRUE)
TEnet <- TEnet %>%
  group_by(parent) %>%
  mutate(degree = sqrt(10 * n() + 1))

# create plot:
ggplot(data = TEnet,
       aes(from_id = parent, to_id = child)) +
  geom_net(
    aes(fontsize = degree), directed = TRUE,
    label = TRUE, vjust = -.5, size = 3,
    ecolour = "grey70") +
  theme_net() +
  xlim(c(-0.05, 1.05))
@
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{ggnet2}
<<theme_ggnetwork, size="footnotesize", opts.label="codefig", echo=TRUE>>=
ggplot(ggnetwork(te.net),
       aes(x, y, xend = xend, yend = yend)) +
  geom_edges() +
  geom_nodes(size = 12, color = "white") +
  geom_nodetext(
    aes(size = size, label = vertex.names)) +
  scale_size_continuous(range = c(3, 5)) +
  guides(size = FALSE) +
  theme_blank()
@
\end{subfigure}

\caption{\label{fig.cap:theme} Inheritance structure of \pkg{ggplot2} theme elements. This is a recreation of the graph found at \protect\url{http://docs.ggplot2.org/current/theme.html}.}
\end{figure}
\afterpage{\clearpage}

The inheritance structure is plotted in figure \ref{fig.cap:theme}.  In this plot, it is easy to quickly determine the parent and child vertices. Using this plot made creation of the \samp{theme\_net} object used throughout these examples very simple. We just made set each of the major parent elements, \samp{text}, \samp{rect}, and \samp{line} to \samp{element\_blank()} and then set the aspect ratio equal to one.

\subsection{Mad Men Networks}
  The following code creates the network example given in the introduction. We changed the vertex size and edge color for all vertices and edges, included vertex labels, and colored the vertices according to the character's gender.
<<print, ref.label="madmen_ggnet", eval=FALSE, echo=TRUE,cache=FALSE>>=
@

The code for the other two approaches follows below and the corresponding networks are shown in figure~\ref{fig:madmen-2}.

<<madmen_ggnet2, echo=TRUE, out.width='\\textwidth', fig.width=9, fig.height=9>>=
# TODO
plot(1:10)
@

<<madmen_ggnetwork, echo=TRUE,  out.width='\\textwidth', fig.width=9, fig.height=9>>=
rownames(madmen$vertices) <- madmen$vertices$label
mm.net <- network(madmen$edges[, 1:2], directed = FALSE)
mm.net %v% "Gender" <- as.character(madmen$vertices[ network.vertex.names(mm.net), "Gender"])

ggplot(data = ggnetwork(mm.net), aes(x, y, xend = xend, yend = yend)) +
  geom_edges(color = "grey50") +
  geom_nodes(aes(colour = Gender), size = 4) + # label= TRUE, vjust = -0.6
  geom_nodetext(aes(colour = Gender, label = vertex.names), size = 4, vjust = -0.6) +
  scale_colour_manual(values = c( "#FF69B4", "#0099ff")) +
  xlim(c(-0.05, 1.05)) +
  theme_blank() +
  theme(legend.position = "bottom")
@

\begin{figure}[hbtp]
\begin{subfigure}[t]{.495\textwidth}
\caption{ggnet2}
\includegraphics[width=\textwidth]{figure/madmen_ggnet2-1.pdf}
\end{subfigure}
\begin{subfigure}[t]{.495\textwidth}
\caption{ggnetwork}
\includegraphics[width=\textwidth]{figure/madmen_ggnetwork-1.pdf}
\end{subfigure}

\caption{\label{fig:madmen-2} Graph of the characters in the show Mad Men who are linked by a romantic relationship, ggnet2 and ggnetwork implementation.}
\end{figure}
\afterpage{\clearpage}

 There is another Mad Men network included in the \samp{gcookbook} package \citep{madmen}. It is a directed network, also of romantic relationships between characters, but it also includes advances made by one character that were rejected by the other.  For example, Roger Sterling made advances toward Betty Draper, but Betty refused him, and so there is a directed edge going from Roger to Betty, but not from Betty to Roger.  If the advance is reciprocated, like between Sal Romano and the Bellhop, there are two directed edges between the two vertices.






\begin{figure}
\begin{subfigure}[t]{\textwidth}
\caption{ggnet2}
<<madmen2_ggnet2, size="footnotesize", opts.label="codefig", echo=TRUE>>=
rownames(mm.directed$vertices) <- mm.directed$vertices$label
mm.directed$vertices$Gender <-
  as.character(mm.directed$vertices$Gender)

mm.dir <- network(mm.directed$edges,
                  directed = TRUE)
mm.dir %v% "gender" <-
  mm.directed$vertices[
    network.vertex.names(mm.dir), "Gender" ]

# gender color palette
mm.col <- c("female" = "#ff69b4",
            "male" = "#0099ff")

ggnet2(mm.dir, mode = "fruchtermanreingold", size = 3,
       color = mm.col[ mm.dir %v% "gender" ],
       label = TRUE,
       label.color = mm.col[ mm.dir %v% "gender" ],
       hjust = -0.1, legend.position = "bottom",
       layout.exp = 0.15, arrow.size = 7.5,
       arrow.gap = 0.02)
@
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{geom\_net}
<<madmen2_geom_net, size="footnotesize", opts.label="codefig", echo=TRUE>>=
MM2net <- merge(
  mm.directed$edges,
  mm.directed$vertices,
  by.x = "Name1", by.y = "label", all=TRUE)

ggplot(data = MM2net,
       aes(from_id = Name1, to_id = Name2)) +
  geom_net(
    aes(colour=Gender),  directed = TRUE,
    label = TRUE, ecolour = "grey50",
    linewidth = 0.5, size = 2.5, vjust = -.5,
    layout = 'fruchtermanreingold') +
  scale_colour_manual(
    values = c( "#FF69B4", "#0099ff")) +
  theme_net() + xlim(c(-.1, 1.1)) +
  theme(legend.position = "bottom")
@
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{ggnetwork}
<<madmen2_ggnetwork, size="footnotesize", opts.label="codefig", echo=TRUE, dependson="madmen2_ggnet2">>=
ggplot(
  ggnetwork(mm.dir,
            layout = "fruchtermanreingold"),
       aes(x, y, xend = xend, yend = yend)) +
  geom_edges(
    color = "grey50",
    arrow = arrow(length = unit(10, "pt"),
                  type = "closed")) +
  geom_nodes(size = 3,
             color = mm.col[ mm.dir %v% "gender" ]) +
  geom_nodetext(aes(label = vertex.names),
                color = mm.col[ mm.dir %v% "gender" ],
                hjust = -0.1) +
  theme_blank() +
  theme(legend.position = "bottom")
@
\end{subfigure}

\caption{\label{fig.cap:madmen2} A directed network of relationships in Mad Men.}
\end{figure}
This network is shown in figure \ref{fig.cap:madmen2}.  It is a lot more densely connected than the previous Mad Men example.  This network allows us to see much more of the drama in the show. For instance, we can see that Roger made advances towards Betty, his business partner's wife, which is much more scandalous than what appears in the first network.

\subsection{College Football}
This next example comes from M.E.J. Newman's network data web page \citep{football}.  It is an undirected network consisting of all regular season college football games played between Division I schools in Fall of 2000.  There are 115 vertices and 613 edges: each vertex represents a school, and an edge represents a game played between two schools. There is an additional variable in the vertex data frame corresponding to the conference each team belongs to, and there is an additional variable in the edge data frame that is equal to one if the game occured between teams in the same conference or zero if the game occured between teams in different conferences.

The network of football games is given in figure \ref{fig.cap:football}. Here, we have changed the \samp{linetype} aesthetic to correspond to games that occur between teams in the same conference or different conferences.  These lines are dotted and solid, respectively. We have also assigned a different color to each conference, and the vertices and their labels are colored according to their conference. This coloring and changing of the linetypes make the structure of the game network easier to view.  There is one conference consisting of Navy, Notre Dame, Utah State, Central Florida, and Connecticut, which is spread out, whereas most other conferences' teams are all very close to each other because they play within conference much more than they play out of conference.  At the time, these five schools were all independents and did not have a home conference.  Without the coloring capability, we would not have been able to pick out that difference as easily.
\begin{figure}
\begin{subfigure}[t]{\textwidth}
\caption{ggnet2}\vspace{-.5cm}
<<football_ggnet2, size="footnotesize", opts.label="codefig", echo=TRUE>>=
rownames(football$vertices) <- football$vertices$label

fb.net <- network(football$edges[, 1:2], directed = FALSE)
set.edge.attribute(fb.net, "same.conf", football$edges$same.conf)
fb.net %v% "conf" <- football$vertices[ network.vertex.names(fb.net), "value" ]

ggnet2(fb.net, mode = "fruchtermanreingold",
       color = "conf", color.legend = "Conference", palette = "Paired",
       edge.color = c("color", "grey75"))
@
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{geom\_net}\vspace{-.5cm}
<<football_geom_net, size="footnotesize", fig.height=11, opts.label="codefig", echo=TRUE>>=
# data step: merge vertices and edges
# label independent schools
ftnet <- merge(
  football$edges, football$vertices,
  by.x = "from", by.y = "label", all = TRUE)

sid <- ftnet$value == "Independents"
ftnet$schools <- ""
ftnet$schools[sid] <- ftnet$from[sid]

# create data plot
ggplot(data = ftnet, aes(from_id = from, to_id = to)) +
  geom_net(
    aes(colour = value,
        linetype = factor(same.conf == 1),
        label = schools),
    linewidth = 0.5,
    size = 6, vjust = -0.75, alpha = 0.3,
    layout = 'fruchtermanreingold') +
  theme_net() +
  theme(legend.position = "bottom") + xlim(c(-0.05, 1.05)) +
  scale_colour_brewer("Conference", palette = "Paired")  +
  scale_linetype_manual("Same Conference", values = c(2,1))
@
\end{subfigure}
%
\begin{subfigure}[t]{\textwidth}
\caption{ggnetwork}\vspace{-.5cm}
<<football_ggnetwork, size="footnotesize", opts.label="codefig", echo=TRUE>>=
ggplot(
  ggnetwork(fb.net, layout = "fruchtermanreingold"),
  aes(x, y, xend = xend, yend = yend)) +
  geom_edges(
    aes(linetype = as.logical(same.conf)),
    color = "grey50") +
  geom_nodes(aes(color = conf), size = 4) +
  scale_color_brewer("Conference",
                     palette = "Paired") +
  guides(linetype = FALSE) +
  theme_blank()
@
\end{subfigure}
\caption{\label{fig.cap:football} The network of regular season Division I college football games in the season of fall 2000. The vertices and their labels are colored by conference.}
\end{figure}
\afterpage{\clearpage}

\subsection{Les Mis\'{e}rables}
This next network comes from \citet{lesmis}. It is an undirected network of coappearances of characters in Victor Hugo's \emph{Les Mis\'{e}rables}.  There are 77 vertices representing each of the 77 characters in the book, and an edge connects two vertices if those two characters appear in the same chapter of the book.  There are 254 edges in this network. The edges are also weighted by the number of coappearances. The largest weighting is 31, between the characters Jean Valjean and Cosette.
This network is shown in figures~\ref{fig.cap:lesmis:ggnet2},~\ref{fig.cap:lesmis:ggnet}, and~\ref{fig.cap:lesmis:ggnetwork}. This network reveals many important character groups, as well as the main characters in the story.  The main characters are the ones with high degree, like Valjean, Cosette, and Javert.  There is an extremely wide edge connecting Valjean and Cosette, which implies that they are strongly connected; in fact, Cosette is Valjean's adopted daughter.

<<lesmis_ggnet2, echo=TRUE>>=
# plot with ggnet2
ggnet2(lesmis$edges[, 1:2 ], mode = "kamadakawai", color = "white", label = TRUE,
       edge.size = lesmis$edges$degree / mean(lesmis$edges$degree),
       layout.exp = 0.25)
@

<<lesmis_geom_net, echo=TRUE, fig.width=9.5>>=
# plot with geom_net

# data step: merge vertices and edges
lesmisnet <- merge(lesmis$edges, lesmis$vertices, by.x = "from", by.y = "label", all=TRUE)
lesmisnet$degree[is.na(lesmisnet$degree)] <- 0

# create data plot
ggplot(data = lesmisnet, aes(from_id = from, to_id = to,
                             linewidth = degree/5 + 0.1 )) +
  geom_net(colour = "grey30",  aes(size = degree, alpha = degree),
           ecolour = "grey60", vjust = -0.75,
           layout = 'fruchtermanreingold', label = TRUE) +
  theme_net() + scale_alpha(range=c(0.3, 1))
@

\begin{figure}
\includegraphics[width=\textwidth]{figure/lesmis_ggnet2-1.pdf}
\caption{\label{fig.cap:lesmis:ggnet2} Co-appearance network of characters in Victor Hugo's \emph{Les Mis\'{e}rables} using ggnet2.}
\end{figure}
%
\begin{figure}
\includegraphics[width=\textwidth]{figure/lesmis_geom_net-1.pdf}
\caption{\label{fig.cap:lesmis:ggnet} Co-appearance network of characters in Victor Hugo's \emph{Les Mis\'{e}rables} using geom\_net.}
\end{figure}
%
\begin{figure}
%\includegraphics[width=\textwidth]{figure/lesmis_ggnetwork-1.pdf}
\hh{include ggnetwork example}
\caption{\label{fig.cap:lesmis:ggnetwork} Co-appearance network of characters in Victor Hugo's \emph{Les Mis\'{e}rables} using ggnetwork.}
\end{figure}
%
\afterpage{\clearpage}

\subsection{Bikesharing in D.C.}
The data shows the second quartal trips in 2015 taken with bikes from the bike share company https://secure.capitalbikeshare.com/.
While this bikesharing company is located in the heart of Washington D.C.\ they do have a set of bike stations just outside of Washington in  Rockville, MD and north of it.
Each station is shown as a dot, lines between stations indicate that at least five trips were taken between these two stations; the wider the line, the more trips have been taken between stations. In order to reflect distance between stations, we use as an additional restriction that the fastest trip was at most ten minutes long.

<<bikes_geom_net, echo=TRUE, fig.cap="Bikesharing in Rockville", warning=FALSE, fig.keep='all'>>=
tripnet <- merge(bikes$trips, bikes$stations, by.x = "Start.station", by.y = "name", all = TRUE)

tripnet$Metro = FALSE
idx <- grep("Metro", tripnet$Start.station)
tripnet$Metro[idx] <- TRUE

ggplot(aes(from_id = Start.station, to_id = End.station), data = tripnet) +
  geom_net(aes(linewidth = n / 15, colour = Metro), label = TRUE, vjust = -0.5) +
  theme_net() +
  xlim(c(-0.1, 1.1)) +
  scale_colour_manual("Metro Station", values = c("grey40", "darkorange")) +
  theme(legend.position = "bottom")
# compare to https://secure.capitalbikeshare.com/map/

ggplot(aes(from_id = Start.station, to_id = End.station),  data = tripnet) +
  geom_net(layout = NULL, label = TRUE, vjust = -0.5,
           aes(x = long, y = lat, linewidth = n / 15, colour = Metro)) +
  theme_net() +
  scale_colour_manual("Metro Station", values = c("grey40", "darkorange")) +
  theme(legend.position = "bottom")
@

\begin{figure}
\centering
\includegraphics[width=.49\textwidth]{figure/bikes_geom_net-1.pdf}
\includegraphics[width=.49\textwidth]{figure/bikes_geom_net-2.pdf}
\caption{\label{fig:bikes} Network of bike trips using a Kamada-Kawai layout (left) and a geographically true representation (right, \hh{XXX I would like to include a ggmap here, we need to wait until that package is fixed}). Metro stations are shown in orange. In the Kamada-Kawai layout based on the trips taken, metro stations take a much more central position than in the geographically true representation. }
\end{figure}
\afterpage{\clearpage}


\subsection{Protein Interaction Network in Yeast}
  This example of a protein interaction network comes from \citet{protein}. It is the complete protein-protein interaction network in the yeast species \emph{S. cerevisiae}. There are 1,870 proteins that make up the vertices of this network, and there are 2,240 edges between them.  These edges represent ``direct physical interactions" between any two proteins \citep[][p. 42]{protein}. These interactions and their associated proteins are plotted  in figure \ref{fig.cap:yeast}.  We also demonstrate the layout capabilities by changing the layout to random and setting the distribution to \samp{"uniang"}, which is a  ``gaussian donut" layout.  Indeed, we see a nearly round area in the middle of the graph where the layout parameter has forced there to be no vertices.

<<yeast_ggnet2, echo=TRUE, cache=FALSE>>=
# plot with ggnet2
ggnet2(network(protein$edges[,1:2]), size = 2, color = "magenta",
       mode = "random", layout.par = list(dist = "uniang"),
       edge.alpha = 0.05)
@

<<yeast_geom_net, echo=TRUE, cache=FALSE>>=
# plot with geom_net
ggplot(data = protein$edges, aes(from_id = from, to_id = to)) +
  geom_net(alpha=0.25, ealpha = .05, size=2, colour = 'magenta',
           ecolour="grey70", linewidth=0.5,
           layout = 'random', layout.par = list(dist = 'uniang')) +
  theme_net()
@



\begin{figure}
\begin{subfigure}[t]{.49\textwidth}
\caption{ggnet2}
\includegraphics[width=\textwidth]{figure/yeast_ggnet2-1.pdf}
\end{subfigure}
%
\begin{subfigure}[t]{.49\textwidth}
\caption{geom\_net}
\includegraphics[width=\textwidth]{figure/yeast_geom_net-1.pdf}
\end{subfigure}
\caption{\label{fig.cap:yeast} Protein-protein interaction network in \emph{S. cerevisiae}. The layout is random.}
\end{figure}
\afterpage{\clearpage}

\section{Summary}

This file is only a basic article template. For full details of \emph{The R Journal} style and information on how to prepare your article for submission, see the \href{http://journal.r-project.org/share/author-guide.pdf}{Instructions for Authors}.

\bibliography{tyner-briatte-hofmann}

\address{Samantha Tyner\\
  Department of Statistics and Statistical Laboratory\\
  Iowa State University\\
  United States\\}
\email{sctyner@mail.iastate.edu}

\address{Fran\c{c}ois Briatte\\
  Affiliation\\
  Address\\
  Country\\}
\email{francois.briatte@sciencespo.fr}

\address{Heike Hofmann\\
  Department of Statistics and Statistical Laboratory\\
  Iowa State University\\
  United States\\}
\email{hofmann@mail.iastate.edu}
